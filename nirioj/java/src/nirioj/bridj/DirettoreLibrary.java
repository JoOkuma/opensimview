package nirioj.bridj;

import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;

/**
 * Wrapper for library <b>Direttore</b><br>
 * This file was autogenerated by
 * <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit
 * <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or
 * <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("Direttore")
@Runtime(CRuntime.class)
public class DirettoreLibrary
{
  static
  {
    BridJ.register();
  }

  /**
   * DirettoreClose<br>
   * Original signature : <code>void DirettoreClose(uintptr_t*, TD1*)</code><br>
   * <i>native declaration :
   * C:\Users\myerslab\workspace2\Bindings\NIRIOJ\labview\lib\Direttore.h:15</i>
   */
  @Name("DirettoreClose")
  public static void direttoreClose(Pointer<Pointer<Integer>> FPGAReference,
                                    Pointer<TD1> ErrorOut)
  {
    direttoreClose(Pointer.getPeer(FPGAReference),
                   Pointer.getPeer(ErrorOut));
  }

  @Name("DirettoreClose")
  protected native static void direttoreClose(@Ptr long FPGAReference,
                                              @Ptr long ErrorOut);

  /**
   * DirettoreOpen<br>
   * Original signature :
   * <code>void DirettoreOpen(uint32_t, int32_t, uintptr_t*, TD1*)</code><br>
   * <i>native declaration :
   * C:\Users\myerslab\workspace2\Bindings\NIRIOJ\labview\lib\Direttore.h:19</i>
   */
  @Name("DirettoreOpen")
  public static void direttoreOpen(int TriggerFIFODepth,
                                   int MatrixFIFODepth,
                                   Pointer<Pointer<Integer>> FPGAReference,
                                   Pointer<TD1> ErrorOut)
  {
    direttoreOpen(TriggerFIFODepth,
                  MatrixFIFODepth,
                  Pointer.getPeer(FPGAReference),
                  Pointer.getPeer(ErrorOut));
  }

  @Name("DirettoreOpen")
  protected native static void direttoreOpen(int TriggerFIFODepth,
                                             int MatrixFIFODepth,
                                             @Ptr long FPGAReference,
                                             @Ptr long ErrorOut);

  /**
   * DirettoreStart<br>
   * Original signature : <code>void DirettoreStart(uintptr_t*, TD1*)</code><br>
   * <i>native declaration :
   * C:\Users\myerslab\workspace2\Bindings\NIRIOJ\labview\lib\Direttore.h:24</i>
   */
  @Name("DirettoreStart")
  public static void direttoreStart(Pointer<Pointer<Integer>> FPGAReference,
                                    Pointer<TD1> ErrorOut)
  {
    direttoreStart(Pointer.getPeer(FPGAReference),
                   Pointer.getPeer(ErrorOut));
  }

  @Name("DirettoreStart")
  protected native static void direttoreStart(@Ptr long FPGAReference,
                                              @Ptr long ErrorOut);

  /**
   * DirettoreStop<br>
   * Original signature : <code>void DirettoreStop(uintptr_t*, TD1*)</code><br>
   * <i>native declaration :
   * C:\Users\myerslab\workspace2\Bindings\NIRIOJ\labview\lib\Direttore.h:28</i>
   */
  @Name("DirettoreStop")
  public static void direttoreStop(Pointer<Pointer<Integer>> FPGAReference,
                                   Pointer<TD1> ErrorOut)
  {
    direttoreStop(Pointer.getPeer(FPGAReference),
                  Pointer.getPeer(ErrorOut));
  }

  @Name("DirettoreStop")
  protected native static void direttoreStop(@Ptr long FPGAReference,
                                             @Ptr long ErrorOut);

  /**
   * DirettorePlay<br>
   * Original signature :
   * <code>void DirettorePlay(uintptr_t*, int32_t[], int32_t, int32_t[], int32_t, int32_t[], int32_t, int32_t, int16_t[], int32_t, uint32_t*, TD1*)</code><br>
   * <i>native declaration :
   * C:\Users\myerslab\workspace2\Bindings\NIRIOJ\labview\lib\Direttore.h:32</i>
   */
  @Name("DirettorePlay")
  public static void direttorePlay(Pointer<Pointer<Integer>> FPGAReference,
                                   Pointer<Integer> DeltaTimeArray,
                                   int DeltaTimeArrayLength,
                                   Pointer<Integer> NumberOfTimePointsToPlayArray,
                                   int NumberOfTimePointsToPlayArrayLength,
                                   Pointer<Integer> SyncArray,
                                   int SyncArrayLength,
                                   int NumberOfMatrices,
                                   Pointer<Short> MatricesArray,
                                   int MatricesArrayLength,
                                   Pointer<Integer> SpaceLeftInQueue,
                                   Pointer<TD1> ErrorOut)
  {
    direttorePlay(Pointer.getPeer(FPGAReference),
                  Pointer.getPeer(DeltaTimeArray),
                  DeltaTimeArrayLength,
                  Pointer.getPeer(NumberOfTimePointsToPlayArray),
                  NumberOfTimePointsToPlayArrayLength,
                  Pointer.getPeer(SyncArray),
                  SyncArrayLength,
                  NumberOfMatrices,
                  Pointer.getPeer(MatricesArray),
                  MatricesArrayLength,
                  Pointer.getPeer(SpaceLeftInQueue),
                  Pointer.getPeer(ErrorOut));
  }

  @Name("DirettorePlay")
  protected native static void direttorePlay(@Ptr long FPGAReference,
                                             @Ptr long DeltaTimeArray,
                                             int DeltaTimeArrayLength,
                                             @Ptr long NumberOfTimePointsToPlayArray,
                                             int NumberOfTimePointsToPlayArrayLength,
                                             @Ptr long SyncArray,
                                             int SyncArrayLength,
                                             int NumberOfMatrices,
                                             @Ptr long MatricesArray,
                                             int MatricesArrayLength,
                                             @Ptr long SpaceLeftInQueue,
                                             @Ptr long ErrorOut);

  /**
   * Original signature : <code>long LVDLLStatus(char*, int, void*)</code><br>
   * <i>native declaration :
   * C:\Users\myerslab\workspace2\Bindings\NIRIOJ\labview\lib\Direttore.h:39</i>
   */
  @Name("LVDLLStatus")
  @CLong
  public static long lVDLLStatus(Pointer<Byte> errStr,
                                 int errStrLen,
                                 Pointer<?> module)
  {
    return lVDLLStatus(Pointer.getPeer(errStr),
                       errStrLen,
                       Pointer.getPeer(module));
  }

  @Name("LVDLLStatus")
  @CLong
  protected native static long lVDLLStatus(@Ptr long errStr,
                                           int errStrLen,
                                           @Ptr long module);
}
