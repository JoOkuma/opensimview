package dcamapi;

import java.util.Collections;
import java.util.Iterator;

import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Runtime;

/**
 * Wrapper for library <b>dcamapi</b><br>
 * This file was autogenerated by
 * <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit
 * <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or
 * <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("dcamapi")
@Runtime(CRuntime.class)
public class DcamapiLibrary
{
  static
  {
    BridJ.register();
  }

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:71</i>
   */
  public enum DCAMERR implements IntValuedEnum<DCAMERR>
  {
   /**
    * status error<br>
    * API cannot process in busy state.
    */
   DCAMERR_BUSY(-2147483391),
   // / API requires ready state.
   DCAMERR_NOTREADY(-2147483389),
   // / API requires stable or unstable state.
   DCAMERR_NOTSTABLE(-2147483388),
   // / API does not support in unstable state.
   DCAMERR_UNSTABLE(-2147483387),
   // / API requires busy state.
   DCAMERR_NOTBUSY(-2147483385),
   // / some resource is exclusive and already used
   DCAMERR_EXCLUDED(-2147483376),
   // / something happens near cooler
   DCAMERR_COOLINGTROUBLE(-2147482878),
   // / no trigger when necessary. Some camera supports this error.
   DCAMERR_NOTRIGGER(-2147482877),
   /**
    * wait error<br>
    * abort process
    */
   DCAMERR_ABORT(-2147483390),
   // / timeout
   DCAMERR_TIMEOUT(-2147483386),
   // / frame data is lost
   DCAMERR_LOSTFRAME(-2147482879),
   // / frame is lost but reason is low lever driver's bug
   DCAMERR_MISSINGFRAME_TROUBLE(-2147479802),
   /**
    * initialization error<br>
    * not enough resource except memory
    */
   DCAMERR_NORESOURCE(-2147483135),
   // / not enough memory
   DCAMERR_NOMEMORY(-2147483133),
   // / no sub module
   DCAMERR_NOMODULE(-2147483132),
   // / no driver
   DCAMERR_NODRIVER(-2147483131),
   // / no camera
   DCAMERR_NOCAMERA(-2147483130),
   // / 2.2:no grabber
   DCAMERR_NOGRABBER(-2147483129),
   // / 2.2:no combination on registry
   DCAMERR_NOCOMBINATION(-2147483128), DCAMERR_FAILOPEN(-2147479551),
   // / 2.2:dcam_init() found invalid module
   DCAMERR_INVALIDMODULE(-2147483119),
   // / invalid serial port
   DCAMERR_INVALIDCOMMPORT(-2147483118),
   // / the bus or driver are not available
   DCAMERR_FAILOPENBUS(-2130702335),
   // / camera report error during opening
   DCAMERR_FAILOPENCAMERA(-2113925119),
   /**
    * calling error<br>
    * invalid camera
    */
   DCAMERR_INVALIDCAMERA(-2147481594),
   // / invalid camera handle
   DCAMERR_INVALIDHANDLE(-2147481593),
   // / invalid parameter
   DCAMERR_INVALIDPARAM(-2147481592),
   // / invalid property value
   DCAMERR_INVALIDVALUE(-2147481567),
   // / value is out of range
   DCAMERR_OUTOFRANGE(-2147481566),
   // / 2.2:the property is not readable
   DCAMERR_NOTWRITABLE(-2147481565),
   // / 2.2:the property is not writable
   DCAMERR_NOTREADABLE(-2147481564),
   // / the property id is invalid
   DCAMERR_INVALIDPROPERTYID(-2147481563),
   // / 2.2:old API does not support the value because only new API supports
   // the value
   DCAMERR_NEWAPIREQUIRED(-2147481562),
   // / 2.2:this error happens DCAM get error code from camera unexpectedly
   DCAMERR_WRONGHANDSHAKE(-2147481561),
   // / 2.2:there is no altenative or influence id, or no more property id
   DCAMERR_NOPROPERTY(-2147481560),
   // / 2.2:the property id specifies channel but channel is invalid
   DCAMERR_INVALIDCHANNEL(-2147481559),
   // / 2.2:the property id specifies channel but channel is invalid
   DCAMERR_INVALIDVIEW(-2147481558),
   // / 2.2:the conbination of subarray values are invalid. e.g.
   // DCAM_IDPROP_SUBARRAYHPOS + DCAM_IDPROP_SUBARRAYHSIZE is greater than the
   // number of horizontal pixel of sensor.
   DCAMERR_INVALIDSUBARRAY(-2147481557),
   // / the property cannot access during this DCAM STATUS
   DCAMERR_ACCESSDENY(-2147481556),
   // / the property does not have value text
   DCAMERR_NOVALUETEXT(-2147481555),
   // / at least one property value is wrong
   DCAMERR_WRONGPROPERTYVALUE(-2147481554),
   // / 3.0:the paired camera does not have same parameter
   DCAMERR_DISHARMONY(-2147481552),
   // / framebundle mode should be OFF under current property settings
   DCAMERR_FRAMEBUNDLESHOULDBEOFF(-2147481550),
   // / the frame index is invalid
   DCAMERR_INVALIDFRAMEINDEX(-2147481549),
   // / the session index is invalid
   DCAMERR_INVALIDSESSIONINDEX(-2147481548),
   /**
    * DCAMERR_MISSINGRELATEDFILE = 0x80000837,/* File could be opened but
    * necessary file is missing, e.g. DLL, file body, ... * /<br>
    * camera does not support the function or property with current settings
    */
   DCAMERR_NOTSUPPORT(-2147479805),
   // / camera or bus trouble
   DCAMERR_FAILREADCAMERA(-2097147902),
   DCAMERR_FAILWRITECAMERA(-2097147901),
   DCAMERR_CONFLICTCOMMPORT(-2097147900),
   // / 3.1:Optics part is unplugged so please check it.
   DCAMERR_OPTICS_UNPLUGGED(-2097147899),
   // / 3.1:fail calibration
   DCAMERR_FAILCALIBRATION(-2097147898),
   DCAMERR_FAILEDOPENRECFILE(-2080370687),
   DCAMERR_INVALIDRECHANDLE(-2080370686),
   DCAMERR_FAILEDWRITEDATA(-2080370685),
   DCAMERR_FAILEDREADDATA(-2080370684),
   DCAMERR_NOWRECORDING(-2080370683),
   DCAMERR_WRITEFULL(-2080370682),
   DCAMERR_ALREADYOCCUPIED(-2080370681),
   DCAMERR_TOOLARGEUSERDATASIZE(-2080370680),
   DCAMERR_INVALIDWAITHANDLE(-2080366591),
   /**
    * calling error for DCAM-API 2.1.3<br>
    * unknown message id
    */
   DCAMERR_UNKNOWNMSGID(-2147481599),
   // / unknown string id
   DCAMERR_UNKNOWNSTRID(-2147481598),
   // / unkown parameter id
   DCAMERR_UNKNOWNPARAMID(-2147481597),
   // / unknown bitmap bits type
   DCAMERR_UNKNOWNBITSTYPE(-2147481596),
   // / unknown frame data type
   DCAMERR_UNKNOWNDATATYPE(-2147481595),
   /**
    * internal error<br>
    * no error, nothing to have done
    */
   DCAMERR_NONE(0),
   // / installation progress
   DCAMERR_INSTALLATIONINPROGRESS(-2147479808),
   // / internal error
   DCAMERR_UNREACH(-2147479807),
   // / calling after process terminated
   DCAMERR_UNLOADED(-2147479804), DCAMERR_THRUADAPTER(-2147479803),
   // / HDCAM lost connection to camera
   DCAMERR_NOCONNECTION(-2147479801),
   // / not yet implementation
   DCAMERR_NOTIMPLEMENT(-2147479806),
   /**
    * success<br>
    * no error, general success code, app should check the value is positive
    */
   DCAMERR_SUCCESS(1);
    DCAMERR(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMERR> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMERR> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:171</i>
   */
  public enum DCAM_USERDATAKIND implements
                                IntValuedEnum<DCAM_USERDATAKIND>
  {
   DCAM_USERDATAKIND_FRAME(0),
   DCAM_USERDATAKIND_FILE(16777216),
   DCAM_USERDATAKIND_SESSION(33554432);
    DCAM_USERDATAKIND(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAM_USERDATAKIND> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAM_USERDATAKIND> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:179</i>
   */
  public enum DCAM_PIXELTYPE implements IntValuedEnum<DCAM_PIXELTYPE>
  {
   DCAM_PIXELTYPE_NONE(0),
   DCAM_PIXELTYPE_MONO8(1),
   DCAM_PIXELTYPE_MONO16(2),
   DCAM_PIXELTYPE_YUV411(21),
   DCAM_PIXELTYPE_YUV422(22),
   DCAM_PIXELTYPE_YUV444(23),
   DCAM_PIXELTYPE_RGB24(33),
   DCAM_PIXELTYPE_RGB48(34),
   DCAM_PIXELTYPE_BGR24(41),
   DCAM_PIXELTYPE_BGR48(42);
    DCAM_PIXELTYPE(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAM_PIXELTYPE> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAM_PIXELTYPE> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:198</i>
   */
  public enum DCAMBUF_ATTACHKIND implements
                                 IntValuedEnum<DCAMBUF_ATTACHKIND>
  {
   DCAMBUF_ATTACHKIND_TIMESTAMP(1), DCAMBUF_ATTACHKIND_FRAME(0);
    DCAMBUF_ATTACHKIND(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMBUF_ATTACHKIND> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMBUF_ATTACHKIND> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * --- status --- **<br>
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:206</i>
   */
  public enum DCAMCAP_STATUS implements IntValuedEnum<DCAMCAP_STATUS>
  {
   DCAMCAP_STATUS_ERROR(0),
   DCAMCAP_STATUS_BUSY(1),
   DCAMCAP_STATUS_READY(2),
   DCAMCAP_STATUS_STABLE(3),
   DCAMCAP_STATUS_UNSTABLE(4),
   DCAM_STATUS_ERROR((int) DcamapiLibrary.DCAMCAP_STATUS.DCAMCAP_STATUS_ERROR.value()),
   DCAM_STATUS_BUSY((int) DcamapiLibrary.DCAMCAP_STATUS.DCAMCAP_STATUS_BUSY.value()),
   DCAM_STATUS_READY((int) DcamapiLibrary.DCAMCAP_STATUS.DCAMCAP_STATUS_READY.value()),
   DCAM_STATUS_STABLE((int) DcamapiLibrary.DCAMCAP_STATUS.DCAMCAP_STATUS_STABLE.value()),
   DCAM_STATUS_UNSTABLE((int) DcamapiLibrary.DCAMCAP_STATUS.DCAMCAP_STATUS_UNSTABLE.value()),
   end_of_dcamcap_status((int) DcamapiLibrary.DCAMCAP_STATUS.DCAMCAP_STATUS_UNSTABLE.value()
                         + 1);
    DCAMCAP_STATUS(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMCAP_STATUS> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMCAP_STATUS> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:226</i>
   */
  public enum DCAMWAIT_EVENT implements IntValuedEnum<DCAMWAIT_EVENT>
  {
   DCAMCAP_EVENT_TRANSFERRED(1),
   // / all modules support
   DCAMCAP_EVENT_FRAMEREADY(2),
   // / all modules support
   DCAMCAP_EVENT_CYCLEEND(4),
   DCAMCAP_EVENT_EXPOSUREEND(8),
   DCAMCAP_EVENT_STOPPED(16),
   DCAMCAP_EVENT_FRAMEREADYORSTOPPED(2 | 16),

   DCAMREC_EVENT_STOPPED(256),
   DCAMREC_EVENT_WARNING(512),
   DCAMREC_EVENT_MISSED(1024),
   // / DCAMREC_EVENT_FULLBUF = 0x0800, /* *cancel* * /
   DCAMREC_EVENT_DISKFULL(4096),
   DCAMREC_EVENT_WRITEFAULT(8192),
   DCAM_EVENT_FRAMESTART((int) DcamapiLibrary.DCAMWAIT_EVENT.DCAMCAP_EVENT_TRANSFERRED.value()),
   DCAM_EVENT_FRAMEEND((int) DcamapiLibrary.DCAMWAIT_EVENT.DCAMCAP_EVENT_FRAMEREADY.value()),
   DCAM_EVENT_CYCLEEND((int) DcamapiLibrary.DCAMWAIT_EVENT.DCAMCAP_EVENT_CYCLEEND.value()),
   // / old name was VVALIDBEGIN
   DCAM_EVENT_EXPOSUREEND((int) DcamapiLibrary.DCAMWAIT_EVENT.DCAMCAP_EVENT_EXPOSUREEND.value()),
   DCAM_EVENT_CAPTUREEND((int) DcamapiLibrary.DCAMWAIT_EVENT.DCAMCAP_EVENT_STOPPED.value()),
   end_of_dcamwait_event((int) DcamapiLibrary.DCAMWAIT_EVENT.DCAMCAP_EVENT_STOPPED.value()
                         + 1);
    DCAMWAIT_EVENT(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMWAIT_EVENT> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMWAIT_EVENT> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * --- dcamcap_start --- **<br>
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:254</i>
   */
  public enum DCAMCAP_START implements IntValuedEnum<DCAMCAP_START>
  {
   DCAMCAP_START_SEQUENCE(-1), DCAMCAP_START_SNAP(0);
    DCAMCAP_START(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMCAP_START> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMCAP_START> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * --- string id --- **<br>
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:262</i>
   */
  public enum DCAM_IDSTR implements IntValuedEnum<DCAM_IDSTR>
  {
   DCAM_IDSTR_BUS(67109121),
   DCAM_IDSTR_CAMERAID(67109122),
   DCAM_IDSTR_VENDOR(67109123),
   DCAM_IDSTR_MODEL(67109124),
   DCAM_IDSTR_CAMERAVERSION(67109125),
   DCAM_IDSTR_DRIVERVERSION(67109126),
   DCAM_IDSTR_MODULEVERSION(67109127),
   DCAM_IDSTR_DCAMAPIVERSION(67109128),
   DCAM_IDSTR_OPTICALBLOCK_MODEL(67113217),
   DCAM_IDSTR_OPTICALBLOCK_ID(67113218),
   DCAM_IDSTR_OPTICALBLOCK_DESCRIPTION(67113219),
   DCAM_IDSTR_OPTICALBLOCK_CHANNEL_1(67113220),
   DCAM_IDSTR_OPTICALBLOCK_CHANNEL_2(67113221);
    DCAM_IDSTR(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAM_IDSTR> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAM_IDSTR> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * --- wait timeout --- **<br>
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:283</i>
   */
  public enum DCAMWAIT_TIMEOUT implements
                               IntValuedEnum<DCAMWAIT_TIMEOUT>
  {
   DCAMWAIT_TIMEOUT_INFINITE(-2147483648),
   DCAM_WAIT_INFINITE((int) DcamapiLibrary.DCAMWAIT_TIMEOUT.DCAMWAIT_TIMEOUT_INFINITE.value()),
   end_of_dcamwait_timeout((int) DcamapiLibrary.DCAMWAIT_TIMEOUT.DCAMWAIT_TIMEOUT_INFINITE.value()
                           + 1);
    DCAMWAIT_TIMEOUT(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMWAIT_TIMEOUT> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMWAIT_TIMEOUT> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:300</i>
   */
  public enum DCAM_METADATAKIND implements
                                IntValuedEnum<DCAM_METADATAKIND>
  {
   DCAM_METADATAKIND_USERDATATEXT(1),
   DCAM_METADATAKIND_USERDATABIN(2),
   DCAM_METADATAKIND_TIMESTAMPS(65536);
    DCAM_METADATAKIND(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAM_METADATAKIND> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAM_METADATAKIND> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:308</i>
   */
  public enum DCAMREC_STATUSFLAG implements
                                 IntValuedEnum<DCAMREC_STATUSFLAG>
  {
   DCAMREC_STATUSFLAG_NONE(0), DCAMREC_STATUSFLAG_RECORDING(1);
    DCAMREC_STATUSFLAG(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMREC_STATUSFLAG> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMREC_STATUSFLAG> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h</i>
   */
  public enum DCAMPROPOPTION implements IntValuedEnum<DCAMPROPOPTION>
  {
   /**
    * direction flag for dcam_getnextpropertyid(), dcam_querypropertyvalue()
    * **<br>
    * prior value
    */
   DCAMPROP_OPTION_PRIOR(-16777216),
   // / next value or id
   DCAMPROP_OPTION_NEXT(16777216),
   /**
    * direction flag for dcam_querypropertyvalue() **<br>
    * nearest value
    */
   DCAMPROP_OPTION_NEAREST(-2147483648),
   /**
    * option for dcam_getnextpropertyid() **<br>
    * default option
    */
   DCAMPROP_OPTION_SUPPORT(0),
   // / UPDATED and VOLATILE can be used at same time
   DCAMPROP_OPTION_UPDATED(1),
   // / UPDATED and VOLATILE can be used at same time
   DCAMPROP_OPTION_VOLATILE(2),
   // / ARRAYELEMENT
   DCAMPROP_OPTION_ARRAYELEMENT(4),
   /**
    * for all option parameter **<br>
    * no option **
    */
   DCAMPROP_OPTION_NONE(0);
    DCAMPROPOPTION(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMPROPOPTION> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMPROPOPTION> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h</i>
   */
  public enum DCAMPROPATTRIBUTE implements
                                IntValuedEnum<DCAMPROPATTRIBUTE>
  {
   // / supporting information of DCAM_PROPERTYATTR
   DCAMPROP_ATTR_HASRANGE(-2147483648),
   DCAMPROP_ATTR_HASSTEP(1073741824),
   DCAMPROP_ATTR_HASDEFAULT(536870912),
   DCAMPROP_ATTR_HASVALUETEXT(268435456),
   /**
    * property id information<br>
    * value can set the value for each channels
    */
   DCAMPROP_ATTR_HASCHANNEL(134217728),
   /**
    * property attribute<br>
    * The dcam_setproperty() or dcam_setgetproperty() will failure if this bit
    * exists.
    */
   DCAMPROP_ATTR_AUTOROUNDING(8388608),
   // / If this flag does not exist, the value will be round up when it is not
   // supported.
   DCAMPROP_ATTR_STEPPING_INCONSISTENT(4194304),
   /**
    * values.<br>
    * value is releated to image attribute
    */
   DCAMPROP_ATTR_DATASTREAM(2097152),
   // / value has ratio control capability
   DCAMPROP_ATTR_HASRATIO(1048576),
   // / value may be changed by user or automatically
   DCAMPROP_ATTR_VOLATILE(524288),
   // / value can be set when state is manual
   DCAMPROP_ATTR_WRITABLE(131072),
   // / value is readable when state is manual
   DCAMPROP_ATTR_READABLE(65536),
   // / value can set the value for each views
   DCAMPROP_ATTR_HASVIEW(32768),
   // / system id
   DCAMPROP_ATTR__SYSTEM(16384),
   // / This value can get or set at READY status
   DCAMPROP_ATTR_ACCESSREADY(8192),
   // / This value can get or set at BUSY status
   DCAMPROP_ATTR_ACCESSBUSY(4096),
   // / User has to take care to change this value
   DCAMPROP_ATTR_ADVANCED(2048),
   /**
    * reserved<br>
    * writing value takes related effect
    */
   DCAMPROP_ATTR_ACTION(1024),
   /**
    * reserved<br>
    * value is effective
    */
   DCAMPROP_ATTR_EFFECTIVE(512),
   /**
    * property value type<br>
    * undefined
    */
   DCAMPROP_TYPE_NONE(0),
   // / 01: mode, 32bit integer in case of 32bit OS
   DCAMPROP_TYPE_MODE(1),
   // / 02: 32bit integer in case of 32bit OS
   DCAMPROP_TYPE_LONG(2),
   // / 03: 64bit float
   DCAMPROP_TYPE_REAL(3),
   // / mask for property value type
   DCAMPROP_TYPE_MASK(15);
    DCAMPROPATTRIBUTE(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMPROPATTRIBUTE> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMPROPATTRIBUTE> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h</i>
   */
  public enum DCAMPROPATTRIBUTE2 implements
                                 IntValuedEnum<DCAMPROPATTRIBUTE2>
  {
   // / supporting information of DCAM_PROPERTYATTR
   DCAMPROP_ATTR2_ARRAYBASE(134217728),
   DCAMPROP_ATTR2_ARRAYELEMENT(67108864),
   DCAMPROP_ATTR2_REAL32(33554432),
   DCAMPROP_ATTR2__FUTUREUSE(3145724);
    DCAMPROPATTRIBUTE2(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMPROPATTRIBUTE2> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMPROPATTRIBUTE2> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h</i>
   */
  public enum DCAMPROPUNIT implements IntValuedEnum<DCAMPROPUNIT>
  {
   // / sec
   DCAMPROP_UNIT_SECOND(1),
   // / for sensor temperature
   DCAMPROP_UNIT_CELSIUS(2),
   // / for color temperature
   DCAMPROP_UNIT_KELVIN(3),
   // / for LINESPEED
   DCAMPROP_UNIT_METERPERSECOND(4),
   // / for FRAMERATE and LINERATE
   DCAMPROP_UNIT_PERSECOND(5),
   // / for length
   DCAMPROP_UNIT_MICROMETER(7),
   DCAMPROP_UNIT_NONE(0);
    DCAMPROPUNIT(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMPROPUNIT> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMPROPUNIT> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h</i>
   */
  public enum DCAMPROPMODEVALUE implements
                                IntValuedEnum<DCAMPROPMODEVALUE>
  {
   /**
    * DCAM_IDPROP_SENSORMODE<br>
    * "AREA"
    */
   DCAMPROP_SENSORMODE__AREA(1),
   // / "SLIT"
   DCAMPROP_SENSORMODE__SLIT(2),
   /**
    * reserved<br>
    * "LINE"
    */
   DCAMPROP_SENSORMODE__LINE(3),
   // / "TDI"
   DCAMPROP_SENSORMODE__TDI(4),
   // / "FRAMING"
   DCAMPROP_SENSORMODE__FRAMING(5),
   /**
    * reserved<br>
    * "PARTIAL AREA"
    */
   DCAMPROP_SENSORMODE__PARTIALAREA(6),
   /**
    * reserved<br>
    * "SLIT LINE"
    */
   DCAMPROP_SENSORMODE__SLITLINE(9),
   // / "TDI EXTENDED"
   DCAMPROP_SENSORMODE__TDI_EXTENDED(10),
   // / "PANORAMIC"
   DCAMPROP_SENSORMODE__PANORAMIC(11),
   /**
    * DCAM_IDPROP_READOUTSPEED<br>
    * no text
    */
   DCAMPROP_READOUTSPEED__SLOWEST(1),
   // / no text,w/o
   DCAMPROP_READOUTSPEED__FASTEST(2147483647),
   /**
    * DCAM_IDPROP_READOUT_DIRECTION<br>
    * "NORMAL"
    */
   DCAMPROP_READOUT_DIRECTION__NORMAL(1),
   // / "REVERSE"
   DCAMPROP_READOUT_DIRECTION__REVERSE(2),
   // / "BY TRIGGER"
   DCAMPROP_READOUT_DIRECTION__BYTRIGGER(3),
   /**
    * reserved<br>
    * "FRAME"
    */
   DCAMPROP_READOUT_UNIT__FRAME(2),
   // / "BUNDLED LINE"
   DCAMPROP_READOUT_UNIT__BUNDLEDLINE(3),
   // / "BUNDLED FRAME"
   DCAMPROP_READOUT_UNIT__BUNDLEDFRAME(4),
   /**
    * DCAM_IDPROP_CCDMODE<br>
    * "NORMAL CCD"
    */
   DCAMPROP_CCDMODE__NORMALCCD(1),
   // / "EM CCD"
   DCAMPROP_CCDMODE__EMCCD(2),
   /**
    * DCAM_IDPROP_CMOSMODE<br>
    * "NORMAL"
    */
   DCAMPROP_CMOSMODE__NORMAL(1),
   // / "NON DESTRUCTIVE"
   DCAMPROP_CMOSMODE__NONDESTRUCTIVE(2),
   /**
    * DCAM_IDPROP_OUTPUT_INTENSITY<br>
    * "NORMAL"
    */
   DCAMPROP_OUTPUT_INTENSITY__NORMAL(1),
   // / "TEST PATTERN"
   DCAMPROP_OUTPUT_INTENSITY__TESTPATTERN(2),
   /**
    * reserved<br>
    * reserved
    */
   DCAMPROP_OUTPUTDATA_ORIENTATION__NORMAL(1),
   // / reserved
   DCAMPROP_OUTPUTDATA_ORIENTATION__MIRROR(2),
   // / reserved
   DCAMPROP_OUTPUTDATA_ORIENTATION__FLIP(3),
   // / DCAM_IDPROP_OUTPUTDATA_OPERATION
   DCAMPROP_OUTPUTDATA_OPERATION__RAW(1),
   DCAMPROP_OUTPUTDATA_OPERATION__ALIGNED(2),
   /**
    * DCAM_IDPROP_TESTPATTERN_KIND<br>
    * "FLAT"
    */
   DCAMPROP_TESTPATTERN_KIND__FLAT(2),
   // / "HORZGRADATION"
   DCAMPROP_TESTPATTERN_KIND__HORZGRADATION(4),
   // / "INVERT HORZGRADATION"
   DCAMPROP_TESTPATTERN_KIND__IHORZGRADATION(5),
   // / "VERTGRADATION"
   DCAMPROP_TESTPATTERN_KIND__VERTGRADATION(6),
   // / "INVERT VERTGRADATION"
   DCAMPROP_TESTPATTERN_KIND__IVERTGRADATION(7),
   // / "LINE"
   DCAMPROP_TESTPATTERN_KIND__LINE(8),
   // / "DIAGONAL"
   DCAMPROP_TESTPATTERN_KIND__DIAGONAL(10),
   // / "FRAMECOUNT"
   DCAMPROP_TESTPATTERN_KIND__FRAMECOUNT(12),
   /**
    * DCAM_IDPROP_DIGITALBINNING_METHOD<br>
    * "MINIMUM"
    */
   DCAMPROP_DIGITALBINNING_METHOD__MINIMUM(1),
   // / "MAXIMUM"
   DCAMPROP_DIGITALBINNING_METHOD__MAXIMUM(2),
   // / "ODD"
   DCAMPROP_DIGITALBINNING_METHOD__ODD(3),
   // / "EVEN"
   DCAMPROP_DIGITALBINNING_METHOD__EVEN(4),
   // / "SUM"
   DCAMPROP_DIGITALBINNING_METHOD__SUM(5),
   // / "AVERAGE"
   DCAMPROP_DIGITALBINNING_METHOD__AVERAGE(6),
   /**
    * DCAM_IDPROP_TRIGGERSOURCE<br>
    * "INTERNAL"
    */
   DCAMPROP_TRIGGERSOURCE__INTERNAL(1),
   // / "EXTERNAL"
   DCAMPROP_TRIGGERSOURCE__EXTERNAL(2),
   // / "SOFTWARE"
   DCAMPROP_TRIGGERSOURCE__SOFTWARE(3),
   /**
    * DCAM_IDPROP_TRIGGERACTIVE<br>
    * "EDGE"
    */
   DCAMPROP_TRIGGERACTIVE__EDGE(1),
   // / "LEVEL"
   DCAMPROP_TRIGGERACTIVE__LEVEL(2),
   // / "SYNCREADOUT"
   DCAMPROP_TRIGGERACTIVE__SYNCREADOUT(3),
   // / "POINT"
   DCAMPROP_TRIGGERACTIVE__POINT(4),
   /**
    * DCAM_IDPROP_BUS_SPEED<br>
    * no text
    */
   DCAMPROP_BUS_SPEED__SLOWEST(1),
   // / no text,w/o
   DCAMPROP_BUS_SPEED__FASTEST(2147483647),
   /**
    * DCAM_IDPROP_TRIGGER_MODE<br>
    * "NORMAL"
    */
   DCAMPROP_TRIGGER_MODE__NORMAL(1),
   /**
    * = 2,<br>
    * "PIV"
    */
   DCAMPROP_TRIGGER_MODE__PIV(3),
   // / "START"
   DCAMPROP_TRIGGER_MODE__START(6),
   // / "MULTIGATE"
   DCAMPROP_TRIGGER_MODE__MULTIGATE(7),
   /**
    * reserved<br>
    * "MULTIFRAME"
    */
   DCAMPROP_TRIGGER_MODE__MULTIFRAME(8),
   /**
    * DCAM_IDPROP_TRIGGERPOLARITY<br>
    * "NEGATIVE"
    */
   DCAMPROP_TRIGGERPOLARITY__NEGATIVE(1),
   // / "POSITIVE"
   DCAMPROP_TRIGGERPOLARITY__POSITIVE(2),
   /**
    * DCAM_IDPROP_TRIGGER_CONNECTOR<br>
    * "INTERFACE"
    */
   DCAMPROP_TRIGGER_CONNECTOR__INTERFACE(1),
   // / "BNC"
   DCAMPROP_TRIGGER_CONNECTOR__BNC(2),
   // / "MULTI"
   DCAMPROP_TRIGGER_CONNECTOR__MULTI(3),
   /**
    * DCAM_IDPROP_INTERNALTRIGGER_HANDLING<br>
    * "SHORTER EXPOSURE TIME"
    */
   DCAMPROP_INTERNALTRIGGER_HANDLING__SHORTEREXPOSURETIME(1),
   // / "FASTER FRAME RATE"
   DCAMPROP_INTERNALTRIGGER_HANDLING__FASTERFRAMERATE(2),
   // / "ABANDON WRONG FRAME"
   DCAMPROP_INTERNALTRIGGER_HANDLING__ABANDONWRONGFRAME(3),
   // / "BURST MODE"
   DCAMPROP_INTERNALTRIGGER_HANDLING__BURSTMODE(4),
   /**
    * DCAM_IDPROP_TRIGGERENABLE_ACTIVE<br>
    * "DENY"
    */
   DCAMPROP_TRIGGERENABLE_ACTIVE__DENY(1),
   // / "ALWAYS"
   DCAMPROP_TRIGGERENABLE_ACTIVE__ALWAYS(2),
   // / "LEVEL"
   DCAMPROP_TRIGGERENABLE_ACTIVE__LEVEL(3),
   // / "START"
   DCAMPROP_TRIGGERENABLE_ACTIVE__START(4),
   /**
    * DCAM_IDPROP_TRIGGERENABLE_POLARITY<br>
    * "NEGATIVE"
    */
   DCAMPROP_TRIGGERENABLE_POLARITY__NEGATIVE(1),
   // / "POSITIVE"
   DCAMPROP_TRIGGERENABLE_POLARITY__POSITIVE(2),
   // / "INTERLOCK"
   DCAMPROP_TRIGGERENABLE_POLARITY__INTERLOCK(3),
   /**
    * DCAM_IDPROP_OUTPUTTRIGGER_POLARITY<br>
    * "NEGATIVE"
    */
   DCAMPROP_OUTPUTTRIGGER_POLARITY__NEGATIVE(1),
   // / "POSITIVE"
   DCAMPROP_OUTPUTTRIGGER_POLARITY__POSITIVE(2),
   /**
    * DCAM_IDPROP_OUTPUTTRIGGER_ACTIVE<br>
    * "EDGE"
    */
   DCAMPROP_OUTPUTTRIGGER_ACTIVE__EDGE(1),
   // / "LEVEL"
   DCAMPROP_OUTPUTTRIGGER_ACTIVE__LEVEL(2),
   /**
    * DCAM_IDPROP_OUTPUTTRIGGER_KIND<br>
    * "LOW"
    */
   DCAMPROP_OUTPUTTRIGGER_KIND__LOW(1),
   // / "EXPOSURE"
   DCAMPROP_OUTPUTTRIGGER_KIND__EXPOSURE(2),
   // / "PROGRAMABLE"
   DCAMPROP_OUTPUTTRIGGER_KIND__PROGRAMABLE(3),
   // / "TRIGGER READY"
   DCAMPROP_OUTPUTTRIGGER_KIND__TRIGGERREADY(4),
   // / "HIGH"
   DCAMPROP_OUTPUTTRIGGER_KIND__HIGH(5),
   /**
    * DCAM_IDPROP_EXPOSURETIME_CONTROL<br>
    * "OFF"
    */
   DCAMPROP_EXPOSURETIME_CONTROL__OFF(1),
   // / "NORMAL"
   DCAMPROP_EXPOSURETIME_CONTROL__NORMAL(2),
   /**
    * DCAM_IDPROP_TRIGGER_FIRSTEXPOSURE<br>
    * "NEW"
    */
   DCAMPROP_TRIGGER_FIRSTEXPOSURE__NEW(1),
   // / "CURRENT"
   DCAMPROP_TRIGGER_FIRSTEXPOSURE__CURRENT(2),
   /**
    * DCAM_IDPROP_TRIGGER_GLOBALEXPOSURE<br>
    * "NONE"
    */
   DCAMPROP_TRIGGER_GLOBALEXPOSURE__NONE(1),
   // / "ALWAYS"
   DCAMPROP_TRIGGER_GLOBALEXPOSURE__ALWAYS(2),
   // / "DELAYED"
   DCAMPROP_TRIGGER_GLOBALEXPOSURE__DELAYED(3),
   // / "EMULATE"
   DCAMPROP_TRIGGER_GLOBALEXPOSURE__EMULATE(4),
   /**
    * DCAM_IDPROP_FIRSTTRIGGER_BEHAVIOR<br>
    * "START EXPOSURE"
    */
   DCAMPROP_FIRSTTRIGGER_BEHAVIOR__STARTEXPOSURE(1),
   // / "START READOUT"
   DCAMPROP_FIRSTTRIGGER_BEHAVIOR__STARTREADOUT(2),
   /**
    * DCAM_IDPROP_MECHANICALSHUTTER<br>
    * "AUTO"
    */
   DCAMPROP_MECHANICALSHUTTER__AUTO(1),
   // / "CLOSE"
   DCAMPROP_MECHANICALSHUTTER__CLOSE(2),
   // / "OPEN"
   DCAMPROP_MECHANICALSHUTTER__OPEN(3),
   /**
    * DCAM_IDPROP_LIGHTMODE<br>
    * "LOW LIGHT"
    */
   DCAMPROP_LIGHTMODE__LOWLIGHT(1),
   // / "HIGH LIGHT"
   DCAMPROP_LIGHTMODE__HIGHLIGHT(2),
   /**
    * DCAM_IDPROP_SENSITIVITYMODE<br>
    * "OFF"
    */
   DCAMPROP_SENSITIVITYMODE__OFF(1),
   // / "ON"
   DCAMPROP_SENSITIVITYMODE__ON(2),
   // / "INTERLOCK"
   DCAMPROP_SENSITIVITY2_MODE__INTERLOCK(3),
   /**
    * DCAM_IDPROP_EMGAINWARNING_STATUS<br>
    * "NORMAL"
    */
   DCAMPROP_EMGAINWARNING_STATUS__NORMAL(1),
   // / "WARNING"
   DCAMPROP_EMGAINWARNING_STATUS__WARNING(2),
   // / "PROTECTED"
   DCAMPROP_EMGAINWARNING_STATUS__PROTECTED(3),
   /**
    * DCAM_IDPROP_PHOTONIMAGINGMODE<br>
    * "0"
    */
   DCAMPROP_PHOTONIMAGINGMODE__0(0),
   // / "1"
   DCAMPROP_PHOTONIMAGINGMODE__1(1),
   // / "2"
   DCAMPROP_PHOTONIMAGINGMODE__2(2),
   // / "2"
   DCAMPROP_PHOTONIMAGINGMODE__3(3),
   /**
    * DCAM_IDPROP_SENSORCOOLER<br>
    * "OFF"
    */
   DCAMPROP_SENSORCOOLER__OFF(1),
   // / "ON"
   DCAMPROP_SENSORCOOLER__ON(2),
   /**
    * reserved<br>
    * "MAX"
    */
   DCAMPROP_SENSORCOOLER__MAX(4),
   /**
    * DCAM_IDPROP_WHITEBALANCEMODE<br>
    * "FLAT"
    */
   DCAMPROP_WHITEBALANCEMODE__FLAT(1),
   // / "AUTO"
   DCAMPROP_WHITEBALANCEMODE__AUTO(2),
   // / "TEMPERATURE"
   DCAMPROP_WHITEBALANCEMODE__TEMPERATURE(3),
   // / "USER PRESET"
   DCAMPROP_WHITEBALANCEMODE__USERPRESET(4),
   /**
    * DCAM_IDPROP_SHADINGCALIB_METHOD<br>
    * "AVERAGE"
    */
   DCAMPROP_SHADINGCALIB_METHOD__AVERAGE(1),
   // / "MAXIMUM"
   DCAMPROP_SHADINGCALIB_METHOD__MAXIMUM(2),
   // / "USE TARGET"
   DCAMPROP_SHADINGCALIB_METHOD__USETARGET(3),
   /**
    * DCAM_IDPROP_CAPTUREMODE<br>
    * "NORMAL"
    */
   DCAMPROP_CAPTUREMODE__NORMAL(1),
   // / "DARK CALIBRATION"
   DCAMPROP_CAPTUREMODE__DARKCALIB(2),
   // / "SHADING CALIBRATION"
   DCAMPROP_CAPTUREMODE__SHADINGCALIB(3),
   // / "TAP GAIN CALIBRATION"
   DCAMPROP_CAPTUREMODE__TAPGAINCALIB(4),
   // / "BACK FOCUS CALIBRATION"
   DCAMPROP_CAPTUREMODE__BACKFOCUSCALIB(5),
   /**
    * DCAM_IDPROP_INTERFRAMEALU_ENABLE<br>
    * "OFF"
    */
   DCAMPROP_INTERFRAMEALU_ENABLE__OFF(1),
   // / "TRIGGER SOURCE ALL"
   DCAMPROP_INTERFRAMEALU_ENABLE__TRIGGERSOURCE_ALL(2),
   // / "TRIGGER SOURCE INTERNAL ONLY"
   DCAMPROP_INTERFRAMEALU_ENABLE__TRIGGERSOURCE_INTERNAL(3),
   /**
    * DCAM_IDPROP_TAPGAINCALIB_METHOD<br>
    * "AVERAGE"
    */
   DCAMPROP_TAPGAINCALIB_METHOD__AVE(1),
   // / "MAXIMUM"
   DCAMPROP_TAPGAINCALIB_METHOD__MAX(2),
   // / "MINIMUM"
   DCAMPROP_TAPGAINCALIB_METHOD__MIN(3),
   /**
    * DCAM_IDPROP_RECURSIVEFILTERFRAMES<br>
    * "2 FRAMES"
    */
   DCAMPROP_RECURSIVEFILTERFRAMES__2(2),
   // / "4 FRAMES"
   DCAMPROP_RECURSIVEFILTERFRAMES__4(4),
   // / "8 FRAMES"
   DCAMPROP_RECURSIVEFILTERFRAMES__8(8),
   // / "16 FRAMES"
   DCAMPROP_RECURSIVEFILTERFRAMES__16(16),
   // / "32 FRAMES"
   DCAMPROP_RECURSIVEFILTERFRAMES__32(32),
   // / "64 FRAMES"
   DCAMPROP_RECURSIVEFILTERFRAMES__64(64),
   /**
    * DCAM_IDPROP_INTENSITYLUT_MODE<br>
    * "THROUGH"
    */
   DCAMPROP_INTENSITYLUT_MODE__THROUGH(1),
   // / "PAGE"
   DCAMPROP_INTENSITYLUT_MODE__PAGE(2),
   /**
    * DCAM_IDPROP_BINNING<br>
    * "1X1"
    */
   DCAMPROP_BINNING__1(1),
   // / "2X2"
   DCAMPROP_BINNING__2(2),
   // / "4X4"
   DCAMPROP_BINNING__4(4),
   // / "8X8"
   DCAMPROP_BINNING__8(8),
   // / "16X16"
   DCAMPROP_BINNING__16(16),
   /**
    * DCAM_IDPROP_COLORTYPE<br>
    * "BW"
    */
   DCAMPROP_COLORTYPE__BW(1),
   // / "RGB"
   DCAMPROP_COLORTYPE__RGB(2),
   // / "BGR"
   DCAMPROP_COLORTYPE__BGR(3),
   /**
    * DCAM_IDPROP_BITSPERCHANNEL<br>
    * "8BIT"
    */
   DCAMPROP_BITSPERCHANNEL__8(8),
   // / "10BIT"
   DCAMPROP_BITSPERCHANNEL__10(10),
   // / "12BIT"
   DCAMPROP_BITSPERCHANNEL__12(12),
   // / "14BIT"
   DCAMPROP_BITSPERCHANNEL__14(14),
   // / "16BIT"
   DCAMPROP_BITSPERCHANNEL__16(16),
   /**
    * DCAM_IDPROP_DEFECTCORRECT_METHOD<br>
    * "CEILING"
    */
   DCAMPROP_DEFECTCORRECT_METHOD__CEILING(3),
   // / "PREVIOUS"
   DCAMPROP_DEFECTCORRECT_METHOD__PREVIOUS(4),
   /**
    * DCAM_IDPROP_SYSTEM_ALIVE<br>
    * "OFFLINE"
    */
   DCAMPROP_SYSTEM_ALIVE__OFFLINE(1),
   // / "ONLINE"
   DCAMPROP_SYSTEM_ALIVE__ONLINE(2),
   /**
    * DCAM_IDPROP_TIMESTAMP_MODE<br>
    * "NONE"
    */
   DCAMPROP_TIMESTAMP_MODE__NONE(1),
   // / "LINE BEFORE LEFT"
   DCAMPROP_TIMESTAMP_MODE__LINEBEFORELEFT(2),
   // / "LINE OVERWRITE LEFT"
   DCAMPROP_TIMESTAMP_MODE__LINEOVERWRITELEFT(3),
   // / "AREA BEFORE LEFT"
   DCAMPROP_TIMESTAMP_MODE__AREABEFORELEFT(4),
   // / "AREA OVERWRITE LEFT"
   DCAMPROP_TIMESTAMP_MODE__AREAOVERWRITELEFT(5),
   /**
    * DCAM_IDPROP_PACECONTROL_MODE<br>
    * "OFF"
    */
   DCAMPROP_PACECONTROL_MODE__OFF(1),
   // / "INTERVAL"
   DCAMPROP_PACECONTROL_MODE__INTERVAL(2),
   // / "THINNING"
   DCAMPROP_PACECONTROL_MODE__THINNING(3),
   /**
    * DCAM_IDPROP_TIMING_EXPOSURE<br>
    * "AFTER READOUT"
    */
   DCAMPROP_TIMING_EXPOSURE__AFTERREADOUT(1),
   // / "OVERLAP READOUT"
   DCAMPROP_TIMING_EXPOSURE__OVERLAPREADOUT(2),
   // / "ROLLING"
   DCAMPROP_TIMING_EXPOSURE__ROLLING(3),
   // / "ALWAYS"
   DCAMPROP_TIMING_EXPOSURE__ALWAYS(4),
   // / "TDI"
   DCAMPROP_TIMING_EXPOSURE__TDI(5),
   /**
    * DCAM_IDPROP_TIMING_TIMESTAMP<br>
    * "NONE"
    */
   DCAMPROP_TIMING_TIMESTAMP__NONE(1),
   // / "ROLING EXPOSURE START"
   DCAMPROP_TIMING_TIMESTAMP__ROLLINGEXPOSURE_START(2),
   // / "GLOBAL EXPOSURE START"
   DCAMPROP_TIMING_TIMESTAMP__GLOBALEXPOSURE_START(3),
   // / "GLOBAL EXPOSURE END"
   DCAMPROP_TIMING_TIMESTAMP__GLOBALEXPOSURE_END(4),
   // / "EXPOSURE_START"
   DCAMPROP_TIMING_TIMESTAMP__READOUT_START(5),
   // / "EXPOSURE_START"
   DCAMPROP_TIMING_TIMESTAMP__ROLLINGEXPOSURE_END(6),
   // / "EXPOSURE_START"
   DCAMPROP_TIMING_TIMESTAMP__READOUT_END(7),
   // / "EXPOSURE_START"
   DCAMPROP_TIMING_TIMESTAMP__CAPTURE_FRAMESTART(8),
   // / "EXPOSURE_START"
   DCAMPROP_TIMING_TIMESTAMP__CAPTURE_FRAMEEND(9),
   // / "EXPOSURE_START"
   DCAMPROP_TIMING_TIMESTAMP__DCAMFRAME_START(10),
   // / "EXPOSURE_START"
   DCAMPROP_TIMING_TIMESTAMP__DCAMFRAME_END(11),
   /**
    * DCAM_IDPROP_TIMESTAMP_PRODUCER<br>
    * "NONE"
    */
   DCAMPROP_TIMESTAMP_PRODUCER__NONE(1),
   // / "DCAM MODULE"
   DCAMPROP_TIMESTAMP_PRODUCER__DCAMMODULE(2),
   // / "KERNEL DRIVER"
   DCAMPROP_TIMESTAMP_PRODUCER__KERNELDRIVER(3),
   // / "CAPTURE DEVICE"
   DCAMPROP_TIMESTAMP_PRODUCER__CAPTUREDEVICE(4),
   // / "IMAGING DEVICE"
   DCAMPROP_TIMESTAMP_PRODUCER__IMAGINGDEVICE(5),
   /**
    * DCAM_IDPROP_FRAMESTAMP_PRODUCER<br>
    * "NONE"
    */
   DCAMPROP_FRAMESTAMP_PRODUCER__NONE(1),
   // / "DCAM MODULE"
   DCAMPROP_FRAMESTAMP_PRODUCER__DCAMMODULE(2),
   // / "KERNEL DRIVER"
   DCAMPROP_FRAMESTAMP_PRODUCER__KERNELDRIVER(3),
   // / "CAPTURE DEVICE"
   DCAMPROP_FRAMESTAMP_PRODUCER__CAPTUREDEVICE(4),
   // / "IMAGING DEVICE"
   DCAMPROP_FRAMESTAMP_PRODUCER__IMAGINGDEVICE(5),
   /**
    * DCAM_IDPROP_CAMERASTATUS_INTENSITY<br>
    * "GOOD"
    */
   DCAMPROP_CAMERASTATUS_INTENSITY__GOOD(1),
   // / "TOO DRAK"
   DCAMPROP_CAMERASTATUS_INTENSITY__TOODARK(2),
   // / "TOO BRIGHT"
   DCAMPROP_CAMERASTATUS_INTENSITY__TOOBRIGHT(3),
   // / "UNCARE"
   DCAMPROP_CAMERASTATUS_INTENSITY__UNCARE(4),
   // / "EMGAIN PROTECTION"
   DCAMPROP_CAMERASTATUS_INTENSITY__EMGAIN_PROTECTION(5),
   // / "INCONSISTENT OPTICS"
   DCAMPROP_CAMERASTATUS_INTENSITY__INCONSISTENT_OPTICS(6),
   /**
    * DCAM_IDPROP_CAMERASTATUS_INPUTTRIGGER<br>
    * "GOOD"
    */
   DCAMPROP_CAMERASTATUS_INPUTTRIGGER__GOOD(1),
   // / "NONE"
   DCAMPROP_CAMERASTATUS_INPUTTRIGGER__NONE(2),
   // / "TOO FREQUENT"
   DCAMPROP_CAMERASTATUS_INPUTTRIGGER__TOOFREQUENT(3),
   /**
    * DCAM_IDPROP_CAMERASTATUS_CALIBRATION<br>
    * "DONE"
    */
   DCAMPROP_CAMERASTATUS_CALIBRATION__DONE(1),
   // / "NOT YET"
   DCAMPROP_CAMERASTATUS_CALIBRATION__NOTYET(2),
   // / "NO TRIGGER"
   DCAMPROP_CAMERASTATUS_CALIBRATION__NOTRIGGER(3),
   // / "TOO FREQUENT TRIGGER"
   DCAMPROP_CAMERASTATUS_CALIBRATION__TOOFREQUENTTRIGGER(4),
   // / "OUT OF ADJUSTABLE RANGE"
   DCAMPROP_CAMERASTATUS_CALIBRATION__OUTOFADJUSTABLERANGE(5),
   // / "UNSUITABLE TABLE"
   DCAMPROP_CAMERASTATUS_CALIBRATION__UNSUITABLETABLE(6),
   // / "TOO DARK"
   DCAMPROP_CAMERASTATUS_CALIBRATION__TOODARK(7),
   // / "TOO BRIGHT"
   DCAMPROP_CAMERASTATUS_CALIBRATION__TOOBRIGHT(8),
   // / "NOT DETECT OBJECT"
   DCAMPROP_CAMERASTATUS_CALIBRATION__NOTDETECTOBJECT(9),
   /**
    * -- for general purpose --<br>
    * "OFF"
    */
   DCAMPROP_MODE__OFF(1),
   // / "ON"
   DCAMPROP_MODE__ON(2),
   DCAMPROP_SCAN_MODE__NORMAL((int) DcamapiLibrary.DCAMPROPMODEVALUE.DCAMPROP_SENSORMODE__AREA.value()),
   DCAMPROP_SCAN_MODE__SLIT((int) DcamapiLibrary.DCAMPROPMODEVALUE.DCAMPROP_SENSORMODE__SLIT.value()),
   // / "OFF"
   DCAMPROP_SWITCHMODE_OFF((int) DcamapiLibrary.DCAMPROPMODEVALUE.DCAMPROP_MODE__OFF.value()),
   // / "ON"
   DCAMPROP_SWITCHMODE_ON((int) DcamapiLibrary.DCAMPROPMODEVALUE.DCAMPROP_MODE__ON.value()),
   // / was "PULSE"
   DCAMPROP_TRIGGERACTIVE__PULSE((int) DcamapiLibrary.DCAMPROPMODEVALUE.DCAMPROP_TRIGGERACTIVE__SYNCREADOUT.value()),
   // / -- miss spelling --
   DCAMPROP_TRIGGERSOURCE__EXERNAL((int) DcamapiLibrary.DCAMPROPMODEVALUE.DCAMPROP_TRIGGERSOURCE__EXTERNAL.value());
    DCAMPROPMODEVALUE(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMPROPMODEVALUE> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMPROPMODEVALUE> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * enum values<br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h</i>
   */
  public enum DCAMIDPROP implements IntValuedEnum<DCAMIDPROP>
  {
   /**
    * Group: TIMING<br>
    * R/W, mode, "TRIGGER SOURCE"
    */
   DCAM_IDPROP_TRIGGERSOURCE(1048848),
   // / R/W, mode, "TRIGGER ACTIVE"
   DCAM_IDPROP_TRIGGERACTIVE(1048864),
   // / R/W, mode, "TRIGGER MODE"
   DCAM_IDPROP_TRIGGER_MODE(1049104),
   // / R/W, mode, "TRIGGER POLARITY"
   DCAM_IDPROP_TRIGGERPOLARITY(1049120),
   // / R/W, mode, "TRIGGER CONNECTOR"
   DCAM_IDPROP_TRIGGER_CONNECTOR(1049136),
   // / R/W, long, "TRIGGER TIMES"
   DCAM_IDPROP_TRIGGERTIMES(1049152),
   /**
    * 0x00100250 is reserved<br>
    * R/W, sec, "TRIGGER DELAY"
    */
   DCAM_IDPROP_TRIGGERDELAY(1049184),
   // / R/W, mode, "INTERNAL TRIGGER HANDLING"
   DCAM_IDPROP_INTERNALTRIGGER_HANDLING(1049200),
   // / R/W, long, "TRIGGER MULTI FRAME COUNT"
   DCAM_IDPROP_TRIGGERMULTIFRAME_COUNT(1049216),
   // / R/W, mode, "TRIGGER ENABLE ACTIVE"
   DCAM_IDPROP_TRIGGERENABLE_ACTIVE(1049616),
   // / R/W, mode, "TRIGGER ENABLE POLARITY"
   DCAM_IDPROP_TRIGGERENABLE_POLARITY(1049632),
   // / R/O, long, "TRIGGER NUMBER FOR FIRST IMAGE"
   DCAM_IDPROP_TRIGGERNUMBER_FORFIRSTIMAGE(1050640),
   // / R/O, long, "TRIGGER NUMBER FOR NEXT IMAGE"
   DCAM_IDPROP_TRIGGERNUMBER_FORNEXTIMAGE(1050656),
   // / R/W, long, "BUS SPEED"
   DCAM_IDPROP_BUS_SPEED(1573136),
   // / R/O, long, "NUMBER OF OUTPUT TRIGGER CONNECTOR"
   DCAM_IDPROP_NUMBEROF_OUTPUTTRIGGERCONNECTOR(1835024),
   /**
    * reserved<br>
    * R/W, mode, "OUTPUT TRIGGER POLARITY"
    */
   DCAM_IDPROP_OUTPUTTRIGGER_POLARITY(1835296),
   // / R/W, mode, "OUTPUT TRIGGER ACTIVE"
   DCAM_IDPROP_OUTPUTTRIGGER_ACTIVE(1835312),
   // / R/W, sec, "OUTPUT TRIGGER DELAY"
   DCAM_IDPROP_OUTPUTTRIGGER_DELAY(1835328),
   // / R/W, sec, "OUTPUT TRIGGER PERIOD"
   DCAM_IDPROP_OUTPUTTRIGGER_PERIOD(1835344),
   // / R/W, sec, "OUTPUT TRIGGER KIND"
   DCAM_IDPROP_OUTPUTTRIGGER_KIND(1835360),
   // / the offset of ID for Nth OUTPUT TRIGGER parameter
   DCAM_IDPROP__OUTPUTTRIGGER(256),
   /**
    * exposure period<br>
    * R/W, sec, "EXPOSURE TIME"
    */
   DCAM_IDPROP_EXPOSURETIME(2031888),
   // / R/W, mode, "SYNCHRONOUS MULTI VIEW EXPOSURE"
   DCAM_IDPROP_SYNC_MULTIVIEWEXPOSURE(2031904),
   // / R/W, mode, "EXPOSURE TIME CONTROL"
   DCAM_IDPROP_EXPOSURETIME_CONTROL(2031920),
   // / R/W, mode, "TRIGGER FIRST EXPOSURE"
   DCAM_IDPROP_TRIGGER_FIRSTEXPOSURE(2032128),
   // / R/W, mode, "TRIGGER GLOBAL EXPOSURE"
   DCAM_IDPROP_TRIGGER_GLOBALEXPOSURE(2032384),
   // / R/W, mode, "FIRST TRIGGER BEHAVIOR"
   DCAM_IDPROP_FIRSTTRIGGER_BEHAVIOR(2032400),
   // / R/W, sec, "MULTI FRAME EXPOSURE TIME"
   DCAM_IDPROP_MULTIFRAME_EXPOSURE(2035712),
   /**
    * - 0x001F1FFF for 256 MULTI FRAME<br>
    * the offset of ID for Nth MULTIFRAME
    */
   DCAM_IDPROP__MULTIFRAME(16),
   /**
    * anti-blooming<br>
    * R/W, mode, "LIGHT MODE"
    */
   DCAM_IDPROP_LIGHTMODE(2097424),
   /**
    * sensitivity<br>
    * R/W, mode, "SENSITIVITY MODE"
    */
   DCAM_IDPROP_SENSITIVITYMODE(2097680),
   // / R/W, long, "SENSITIVITY"
   DCAM_IDPROP_SENSITIVITY(2097696),
   // / R/W, mode, "SENSITIVITY2 MODE"
   DCAM_IDPROP_SENSITIVITY2_MODE(2097712),
   /**
    * reserved<br>
    * R/W, long, "SENSITIVITY2"
    */
   DCAM_IDPROP_SENSITIVITY2(2097728),
   // / R/W, mode, "DIRECT EM GAIN MODE"
   DCAM_IDPROP_DIRECTEMGAIN_MODE(2097744),
   // / R/O, mode, "EM GAIN WARNING STATUS"
   DCAM_IDPROP_EMGAINWARNING_STATUS(2097760),
   // / R/W, long, "EM GAIN WARNING LEVEL"
   DCAM_IDPROP_EMGAINWARNING_LEVEL(2097776),
   // / R/W, mode, "EM GAIN WARNING ALARM"
   DCAM_IDPROP_EMGAINWARNING_ALARM(2097792),
   // / R/W, mode, "EM GAIN PROTECT MODE"
   DCAM_IDPROP_EMGAINPROTECT_MODE(2097808),
   // / R/W, long, "EM GAIN PROTECT AFTER FRAMES"
   DCAM_IDPROP_EMGAINPROTECT_AFTERFRAMES(2097824),
   // / R/W, mode, "PHOTON IMAGING MODE"
   DCAM_IDPROP_PHOTONIMAGINGMODE(2097904),
   /**
    * sensor cooler<br>
    * R/O, celsius,"SENSOR TEMPERATURE"
    */
   DCAM_IDPROP_SENSORTEMPERATURE(2097936),
   // / R/W, mode, "SENSOR COOLER"
   DCAM_IDPROP_SENSORCOOLER(2097952),
   // / R/W, celsius,"SENSOR TEMPERATURE TARGET"
   DCAM_IDPROP_SENSORTEMPERATURETARGET(2097968),
   // / R/W, mode, "SENSOR COOLER FAN"
   DCAM_IDPROP_SENSORCOOLERFAN(2098000),
   /**
    * mechanical shutter<br>
    * R/W, mode, "MECHANICAL SHUTTER"
    */
   DCAM_IDPROP_MECHANICALSHUTTER(2098192),
   /**
    * reserved<br>
    * R/W, long, "CONTRAST GAIN"
    */
   DCAM_IDPROP_CONTRASTGAIN(3146016),
   // / R/W, long, "CONTRAST OFFSET"
   DCAM_IDPROP_CONTRASTOFFSET(3146032),
   /**
    * 0x00300140 is reserved<br>
    * R/W, mode, "HIGH DYNAMIC RANGE MODE"
    */
   DCAM_IDPROP_HIGHDYNAMICRANGE_MODE(3146064),
   // / R/W, mode, "DIRECT GAIN MODE"
   DCAM_IDPROP_DIRECTGAIN_MODE(3146080),
   /**
    * color features<br>
    * R/W, mode, "VIVID COLOR"
    */
   DCAM_IDPROP_VIVIDCOLOR(3146240),
   /**
    * comment<br>
    * R/W, mode, "WHITEBALANCE MODE"
    */
   DCAM_IDPROP_WHITEBALANCEMODE(3146256),
   // / R/W, color-temp., "WHITEBALANCE TEMPERATURE"
   DCAM_IDPROP_WHITEBALANCETEMPERATURE(3146272),
   // / R/W, long, "WHITEBALANCE USER PRESET"
   DCAM_IDPROP_WHITEBALANCEUSERPRESET(3146288),
   /**
    * ALU<br>
    * R/W, mode, "INTERFRAME ALU ENABLE"
    */
   DCAM_IDPROP_INTERFRAMEALU_ENABLE(3670032),
   // / R/W, mode, "RECURSIVE FILTER"
   DCAM_IDPROP_RECURSIVEFILTER(3670288),
   // / R/W, long, "RECURSIVE FILTER FRAMES"
   DCAM_IDPROP_RECURSIVEFILTERFRAMES(3670304),
   // / R/W, mode, "SPOT NOISE REDUCER"
   DCAM_IDPROP_SPOTNOISEREDUCER(3670320),
   // / R/W, mode, "SUBTRACT"
   DCAM_IDPROP_SUBTRACT(3670544),
   // / R/W, mode, "SUBTRACT IMAGE MEMORY"
   DCAM_IDPROP_SUBTRACTIMAGEMEMORY(3670560),
   // / W/O, mode, "STORE SUBTRACT IMAGE TO MEMORY"
   DCAM_IDPROP_STORESUBTRACTIMAGETOMEMORY(3670576),
   // / R/W, long "SUBTRACT OFFSET"
   DCAM_IDPROP_SUBTRACTOFFSET(3670592),
   // / R/W, long, "DARKCALIB STABLE MAX INTENSITY"
   DCAM_IDPROP_DARKCALIB_STABLEMAXINTENSITY(3670608),
   // / R/W, mode, "SHADING CORRECTION"
   DCAM_IDPROP_SHADINGCORRECTION(3670800),
   // / R/W, mode, "SHADING CALIB DATA MEMORY"
   DCAM_IDPROP_SHADINGCALIBDATAMEMORY(3670816),
   // / W/O, mode, "STORE SHADING DATA TO MEMORY"
   DCAM_IDPROP_STORESHADINGCALIBDATATOMEMORY(3670832),
   // / R/W, mode, "SHADING CALIB METHOD"
   DCAM_IDPROP_SHADINGCALIB_METHOD(3670848),
   // / R/W, long, "SHADING CALIB TARGET"
   DCAM_IDPROP_SHADINGCALIB_TARGET(3670864),
   // / R/W, long, "SHADING CALIB STABLE MIN INTENSITY"
   DCAM_IDPROP_SHADINGCALIB_STABLEMININTENSITY(3670880),
   // / R/W, long, "SHADING CALIB SAMPLES"
   DCAM_IDPROP_SHADINGCALIB_SAMPLES(3670896),
   // / R/W, long, "SHADING CALIB STABLE SAMPLES"
   DCAM_IDPROP_SHADINGCALIB_STABLESAMPLES(3670912),
   // / R/W, long, "SHADING CALIB STABLE MAX ERROR PERCENT"
   DCAM_IDPROP_SHADINGCALIB_STABLEMAXERRORPERCENT(3670928),
   // / R/W, mode, "FRAME AVERAGING MODE"
   DCAM_IDPROP_FRAMEAVERAGINGMODE(3670944),
   // / R/W, long, "FRAME AVERAGING FRAMES"
   DCAM_IDPROP_FRAMEAVERAGINGFRAMES(3670960),
   // / R/W, long, "DARKCALIB STABLE SAMPLES"
   DCAM_IDPROP_DARKCALIB_STABLESAMPLES(3670976),
   // / R/W, long, "DARKCALIB SAMPLES"
   DCAM_IDPROP_DARKCALIB_SAMPLES(3670992),
   // / R/W, mode, "CAPTURE MODE"
   DCAM_IDPROP_CAPTUREMODE(3671056),
   // / R/W, mode, "INTENSITY LUT MODE"
   DCAM_IDPROP_INTENSITYLUT_MODE(3671312),
   // / R/W, long, "INTENSITY LUT PAGE"
   DCAM_IDPROP_INTENSITYLUT_PAGE(3671328),
   /**
    * TAP CALIBRATION<br>
    * R/W, mode, "TAP GAIN CALIB METHOD"
    */
   DCAM_IDPROP_TAPGAINCALIB_METHOD(3673872),
   // / R/W, mode, "TAP CALIB BASE DATA MEMORY"
   DCAM_IDPROP_TAPCALIB_BASEDATAMEMORY(3673888),
   // / W/O, mode, "STORE TAP CALIB DATA TO MEMORY"
   DCAM_IDPROP_STORETAPCALIBDATATOMEMORY(3673904),
   // / W/O, mode, "TAP CALIB DATA MEMORY"
   DCAM_IDPROP_TAPCALIBDATAMEMORY(3673920),
   // / R/W, long, "NUMBER OF TAP CALIB"
   DCAM_IDPROP_NUMBEROF_TAPCALIB(3674096),
   // / R/W, mode, "TAP CALIB GAIN"
   DCAM_IDPROP_TAPCALIB_GAIN(3674112),
   // / the offset of ID for Nth TAPCALIB
   DCAM_IDPROP__TAPCALIB(16),
   /**
    * readout speed<br>
    * R/W, long, "READOUT SPEED"
    */
   DCAM_IDPROP_READOUTSPEED(4194576),
   /**
    * 0x00400120 is reserved<br>
    * R/W, mode, "READOUT DIRECTION"
    */
   DCAM_IDPROP_READOUT_DIRECTION(4194608),
   // / R/O, mode, "READOUT UNIT"
   DCAM_IDPROP_READOUT_UNIT(4194624),
   /**
    * sensor mode<br>
    * R/W, mode, "SENSOR MODE"
    */
   DCAM_IDPROP_SENSORMODE(4194832),
   // / R/W, long, "SENSOR MODE SLIT HEIGHT"
   DCAM_IDPROP_SENSORMODE_SLITHEIGHT(4194848),
   /**
    * reserved<br>
    * R/W, long, "SENSOR MODE LINE BUNDLEHEIGHT"
    */
   DCAM_IDPROP_SENSORMODE_LINEBUNDLEHEIGHT(4194896),
   // / R/W, long, "SENSOR MODE FRAMING HEIGHT"
   DCAM_IDPROP_SENSORMODE_FRAMINGHEIGHT(4194912),
   /**
    * reserved<br>
    * R/W, long, "SENSOR MODE PANORAMIC START V"
    */
   DCAM_IDPROP_SENSORMODE_PANORAMICSTARTV(4194944),
   /**
    * other readout mode<br>
    * R/W, mode, "CCD MODE"
    */
   DCAM_IDPROP_CCDMODE(4195088),
   // / R/W, mode, "EM CCD CALIBRATION MODE"
   DCAM_IDPROP_EMCCD_CALIBRATIONMODE(4195104),
   // / R/W, mode, "CMOS MODE"
   DCAM_IDPROP_CMOSMODE(4195152),
   /**
    * output mode<br>
    * R/W, mode, "OUTPUT INTENSITY"
    */
   DCAM_IDPROP_OUTPUT_INTENSITY(4195344),
   // / R/W, mode, "OUTPUT DATA ORIENTATION"
   DCAM_IDPROP_OUTPUTDATA_ORIENTATION(4195360),
   /**
    * reserved<br>
    * R/W, degree, "OUTPUT DATA ROTATION"
    */
   DCAM_IDPROP_OUTPUTDATA_ROTATION(4195376),
   /**
    * reserved<br>
    * R/W, mode, "OUTPUT DATA OPERATION"
    */
   DCAM_IDPROP_OUTPUTDATA_OPERATION(4195392),
   // / R/W, mode, "TEST PATTERN KIND"
   DCAM_IDPROP_TESTPATTERN_KIND(4195600),
   // / R/W, long, "TEST PATTERN OPTION"
   DCAM_IDPROP_TESTPATTERN_OPTION(4195616),
   /**
    * binning and subarray<br>
    * R/W, mode, "BINNING"
    */
   DCAM_IDPROP_BINNING(4198672),
   // / R/W, mode, "BINNING INDEPENDENT"
   DCAM_IDPROP_BINNING_INDEPENDENT(4198688),
   // / R/W, long, "BINNING HORZ"
   DCAM_IDPROP_BINNING_HORZ(4198704),
   // / R/W, long, "BINNING VERT"
   DCAM_IDPROP_BINNING_VERT(4198720),
   // / R/W, long, "SUBARRAY HPOS"
   DCAM_IDPROP_SUBARRAYHPOS(4202768),
   // / R/W, long, "SUBARRAY HSIZE"
   DCAM_IDPROP_SUBARRAYHSIZE(4202784),
   // / R/W, long, "SUBARRAY VPOS"
   DCAM_IDPROP_SUBARRAYVPOS(4202800),
   // / R/W, long, "SUBARRAY VSIZE"
   DCAM_IDPROP_SUBARRAYVSIZE(4202816),
   // / R/W, mode, "SUBARRAY MODE"
   DCAM_IDPROP_SUBARRAYMODE(4202832),
   // / R/W, mode, "DIGITALBINNING METHOD"
   DCAM_IDPROP_DIGITALBINNING_METHOD(4202848),
   // / R/W, long, "DIGITALBINNING HORZ"
   DCAM_IDPROP_DIGITALBINNING_HORZ(4202864),
   /**
    * synchronous timing<br>
    * R/O, sec, "TIMING READOUT TIME"
    */
   DCAM_IDPROP_TIMING_READOUTTIME(4206608),
   // / R/O, sec, "TIMING CYCLIC TRIGGER PERIOD"
   DCAM_IDPROP_TIMING_CYCLICTRIGGERPERIOD(4206624),
   // / R/O, sec, "TIMING MINIMUM TRIGGER BLANKING"
   DCAM_IDPROP_TIMING_MINTRIGGERBLANKING(4206640),
   /**
    * 0x00403040 is reserved<br>
    * R/O, sec, "TIMING MINIMUM TRIGGER INTERVAL"
    */
   DCAM_IDPROP_TIMING_MINTRIGGERINTERVAL(4206672),
   // / R/O, mode, "TIMING EXPOSURE"
   DCAM_IDPROP_TIMING_EXPOSURE(4206688),
   // / R/O, sec, "INVALID EXPOSURE PERIOD"
   DCAM_IDPROP_TIMING_INVALIDEXPOSUREPERIOD(4206704),
   // / R/W, long, "TIMING FRAME SKIP NUMBER"
   DCAM_IDPROP_TIMING_FRAMESKIPNUMBER(4206720),
   // / R/O, sec, "TIMING GLOBAL EXPOSURE DELAY"
   DCAM_IDPROP_TIMING_GLOBALEXPOSUREDELAY(4206736),
   // / R/W, 1/sec, "INTERNAL FRAME RATE"
   DCAM_IDPROP_INTERNALFRAMERATE(4208656),
   // / R/W, sec, "INTERNAL FRAME INTERVAL"
   DCAM_IDPROP_INTERNAL_FRAMEINTERVAL(4208672),
   // / R/W, 1/sec, "INTERNAL LINE RATE"
   DCAM_IDPROP_INTERNALLINERATE(4208688),
   // / R/W, m/sec, "INTERNAL LINE SPEEED"
   DCAM_IDPROP_INTERNALLINESPEED(4208704),
   /**
    * 0x00420110 is reserved<br>
    * R/W, mode, "COLORTYPE"
    */
   DCAM_IDPROP_COLORTYPE(4325664),
   // / R/W, long, "BIT PER CHANNEL"
   DCAM_IDPROP_BITSPERCHANNEL(4325680),
   // / R/O, long, "NUMBER OF CHANNEL"
   DCAM_IDPROP_NUMBEROF_CHANNEL(4325760),
   // / R/W, mode, "ACTIVE CHANNEL INDEX"
   DCAM_IDPROP_ACTIVE_CHANNELINDEX(4325776),
   // / R/O, long, "NUMBER OF VIEW"
   DCAM_IDPROP_NUMBEROF_VIEW(4325824),
   // / R/W, mode, "ACTIVE VIEW INDEX"
   DCAM_IDPROP_ACTIVE_VIEWINDEX(4325840),
   // / R/O, long, "IMAGE WIDTH"
   DCAM_IDPROP_IMAGE_WIDTH(4325904),
   // / R/O, long, "IMAGE HEIGHT"
   DCAM_IDPROP_IMAGE_HEIGHT(4325920),
   // / R/O, long, "IMAGE ROWBYTES"
   DCAM_IDPROP_IMAGE_ROWBYTES(4325936),
   // / R/O, long, "IMAGE FRAMEBYTES"
   DCAM_IDPROP_IMAGE_FRAMEBYTES(4325952),
   // / R/O, long, "IMAGE TOP OFFSET BYTES"
   DCAM_IDPROP_IMAGE_TOPOFFSETBYTES(4325968),
   /**
    * reserved<br>
    * R/W, DCAM_PIXELTYPE, "IMAGE PIXEL TYPE "
    */
   DCAM_IDPROP_IMAGE_PIXELTYPE(4326000),
   // / R/O, long, "BUFFER ROWBYTES"
   DCAM_IDPROP_BUFFER_ROWBYTES(4326192),
   // / R/O, long, "BUFFER FRAME BYTES"
   DCAM_IDPROP_BUFFER_FRAMEBYTES(4326208),
   // / R/O, long, "BUFFER TOP OFFSET BYTES"
   DCAM_IDPROP_BUFFER_TOPOFFSETBYTES(4326224),
   // / R/O, DCAM_PIXELTYPE, "BUFFER PIXEL TYPE"
   DCAM_IDPROP_BUFFER_PIXELTYPE(4326240),
   // / R/O, long "RECORD FIXED BYTES PER FILE"
   DCAM_IDPROP_RECORDFIXEDBYTES_PERFILE(4326416),
   // / R/O, long "RECORD FIXED BYTES PER SESSION"
   DCAM_IDPROP_RECORDFIXEDBYTES_PERSESSION(4326432),
   // / R/O, long "RECORD FIXED BYTES PER FRAME"
   DCAM_IDPROP_RECORDFIXEDBYTES_PERFRAME(4326448),
   // / R/O, micro-meter, "IMAGE DETECTOR PIXEL WIDTH"
   DCAM_IDPROP_IMAGEDETECTOR_PIXELWIDTH(4327440),
   /**
    * reserved<br>
    * R/O, micro-meter, "IMAGE DETECTOR PIXEL HEIGHT"
    */
   DCAM_IDPROP_IMAGEDETECTOR_PIXELHEIGHT(4327456),
   // / R/O, mode, "TIME STAMP PRODUCER"
   DCAM_IDPROP_TIMESTAMP_PRODUCER(4262416),
   // / R/O, mode, "FRAME STAMP PRODUCER"
   DCAM_IDPROP_FRAMESTAMP_PRODUCER(4262432),
   /**
    * frame bundle<br>
    * R/W, mode, "FRAMEBUNDLE MODE"
    */
   DCAM_IDPROP_FRAMEBUNDLE_MODE(4329488),
   // / R/W, long, "FRAMEBUNDLE NUMBER"
   DCAM_IDPROP_FRAMEBUNDLE_NUMBER(4329504),
   // / R/O, long, "FRAMEBUNDLE ROWBYTES"
   DCAM_IDPROP_FRAMEBUNDLE_ROWBYTES(4329520),
   // / R/O, long, "FRAMEBUNDLE FRAME STEP BYTES"
   DCAM_IDPROP_FRAMEBUNDLE_FRAMESTEPBYTES(4329536),
   /**
    * partial area<br>
    * R/W, long, "NUMBER OF PARTIAL AREA"
    */
   DCAM_IDPROP_NUMBEROF_PARTIALAREA(4390928),
   // / R/W, long, "PARTIAL AREA HPOS"
   DCAM_IDPROP_PARTIALAREA_HPOS(4395008),
   // / R/W, long, "PARTIAL AREA HSIZE"
   DCAM_IDPROP_PARTIALAREA_HSIZE(4399104),
   // / R/W, long, "PARTIAL AREA VPOS"
   DCAM_IDPROP_PARTIALAREA_VPOS(4403200),
   // / R/W, long, "PARTIAL AREA VSIZE"
   DCAM_IDPROP_PARTIALAREA_VSIZE(4407296),
   // / the offset of ID for Nth PARTIAL AREA
   DCAM_IDPROP__PARTIALAREA(16),
   /**
    * multi line<br>
    * R/W, long, "NUMBER OF MULTI LINE"
    */
   DCAM_IDPROP_NUMBEROF_MULTILINE(4517904),
   // / R/W, long, "MULTI LINE VPOS"
   DCAM_IDPROP_MULTILINE_VPOS(4521984),
   // / R/W, long, "MULTI LINE VSIZE"
   DCAM_IDPROP_MULTILINE_VSIZE(4587520),
   /**
    * reserved<br>
    * the offset of ID for Nth MULTI LINE
    */
   DCAM_IDPROP__MULTILINE(16),
   /**
    * defect<br>
    * R/W, mode, "DEFECT CORRECT MODE"
    */
   DCAM_IDPROP_DEFECTCORRECT_MODE(4653072),
   // / R/W, long, "NUMBER OF DEFECT CORRECT"
   DCAM_IDPROP_NUMBEROF_DEFECTCORRECT(4653088),
   // / R/W, long, "DEFECT CORRECT HPOS"
   DCAM_IDPROP_DEFECTCORRECT_HPOS(4657152),
   // / R/W, mode, "DEFECT CORRECT METHOD"
   DCAM_IDPROP_DEFECTCORRECT_METHOD(4665344),
   /**
    * - 0x0047FFFF for 256 DEFECT<br>
    * the offset of ID for Nth DEFECT
    */
   DCAM_IDPROP__DEFECTCORRECT(16),
   /**
    * Group: PACE CONTROL<br>
    * R/W, mode, "PACE CONTROL MODE"
    */
   DCAM_IDPROP_PACECONTROL_MODE(4849936),
   // / R/W, long, "NUMBER OF PACE CONTROL"
   DCAM_IDPROP_NUMBEROF_PACECONTROL(4849952),
   // / R/W, long, "PACE CONTROL COUNT"
   DCAM_IDPROP_PACECONTROL_COUNT(4853760),
   // / R/W, real, "PACE CONTROL INTERVAL"
   DCAM_IDPROP_PACECONTROL_INTERVAL(4857856),
   /**
    * - 0x004AFFFF for 256 DEFECT, reserved<br>
    * the offset of ID for Nth PACECONTROL
    */
   DCAM_IDPROP__PACECONTROL(16),
   /**
    * Group: CALIBREGION<br>
    * R/W, mode, "CALIBRATE REGION MODE"
    */
   DCAM_IDPROP_CALIBREGION_MODE(4203536),
   // / R/W, long, "NUMBER OF CALIBRATE REGION"
   DCAM_IDPROP_NUMBEROF_CALIBREGION(4203552),
   // / R/W, long, "CALIBRATE REGION HPOS"
   DCAM_IDPROP_CALIBREGION_HPOS(4915200),
   // / R/W, long, "CALIBRATE REGION HSIZE"
   DCAM_IDPROP_CALIBREGION_HSIZE(4919296),
   /**
    * - 0x0048FFFF for 256 REGIONs at least<br>
    * the offset of ID for Nth REGION
    */
   DCAM_IDPROP__CALIBREGION(16),
   /**
    * Group: MASKREGION<br>
    * R/W, mode, "MASK REGION MODE"
    */
   DCAM_IDPROP_MASKREGION_MODE(4203792),
   // / R/W, long, "NUMBER OF MASK REGION"
   DCAM_IDPROP_NUMBEROF_MASKREGION(4203808),
   // / R/W, long, "MASK REGION HPOS"
   DCAM_IDPROP_MASKREGION_HPOS(4980736),
   // / R/W, long, "MASK REGION HSIZE"
   DCAM_IDPROP_MASKREGION_HSIZE(4984832),
   /**
    * - 0x0048FFFF for 256 REGIONs at least<br>
    * the offset of ID for Nth REGION
    */
   DCAM_IDPROP__MASKREGION(16),
   /**
    * Group: Camera Status<br>
    * R/O, mode, "CAMERASTATUS INTENSITY"
    */
   DCAM_IDPROP_CAMERASTATUS_INTENSITY(5050640),
   // / R/O, mode, "CAMERASTATUS INPUT TRIGGER"
   DCAM_IDPROP_CAMERASTATUS_INPUTTRIGGER(5050656),
   // / R/O, mode, "CAMERASTATUS CALIBRATION"
   DCAM_IDPROP_CAMERASTATUS_CALIBRATION(5050672),
   /**
    * Group: Back Focus Position<br>
    * R/W, micro-meter,"BACK FOCUS POSITION TARGET"
    */
   DCAM_IDPROP_BACKFOCUSPOS_TARGET(8405008),
   // / R/O, micro-meter,"BACK FOCUS POSITION CURRENT"
   DCAM_IDPROP_BACKFOCUSPOS_CURRENT(8405024),
   // / R/W, long, "BACK FOCUS POSITION LOAD FROM MEMORY"
   DCAM_IDPROP_BACKFOCUSPOS_LOADFROMMEMORY(8405072),
   // / W/O, long, "BACK FOCUS POSITION STORE TO MEMORY"
   DCAM_IDPROP_BACKFOCUSPOS_STORETOMEMORY(8405088),
   // / R/O, mode, "SYSTEM ALIVE"
   DCAM_IDPROP_SYSTEM_ALIVE(16711696),
   // / option
   DCAM_IDPROP__RATIO(-2147483648),
   // / reserved
   DCAM_IDPROP_EXPOSURETIME_RATIO((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP__RATIO.value()
                                  | (int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_EXPOSURETIME.value()),
   /**
    * reserved<br>
    * reserved
    */
   DCAM_IDPROP_CONTRASTGAIN_RATIO((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP__RATIO.value() | (int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_CONTRASTGAIN.value()), DCAM_IDPROP__CHANNEL(1), DCAM_IDPROP__VIEW(16777216), DCAM_IDPROP__MASK_CHANNEL(15), DCAM_IDPROP__MASK_VIEW(251658240), DCAM_IDPROP__MASK_BODY(16777200),
   // / -- for backward compativilities --
   DCAMPROP_ATTR_REMOTE_VALUE((int) DcamapiLibrary.DCAMPROPATTRIBUTE.DCAMPROP_ATTR_VOLATILE.value()),
   DCAMPROP_PHOTONIMAGING_MODE__0((int) DcamapiLibrary.DCAMPROPMODEVALUE.DCAMPROP_PHOTONIMAGINGMODE__0.value()),
   DCAMPROP_PHOTONIMAGING_MODE__1((int) DcamapiLibrary.DCAMPROPMODEVALUE.DCAMPROP_PHOTONIMAGINGMODE__1.value()),
   DCAMPROP_PHOTONIMAGING_MODE__2((int) DcamapiLibrary.DCAMPROPMODEVALUE.DCAMPROP_PHOTONIMAGINGMODE__2.value()),
   DCAM_IDPROP_SCAN_MODE((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_SENSORMODE.value()),
   DCAM_IDPROP_SLITSCAN_HEIGHT((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_SENSORMODE_SLITHEIGHT.value()),
   DCAM_IDPROP_FRAME_BUNDLEMODE((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_FRAMEBUNDLE_MODE.value()),
   DCAM_IDPROP_FRAME_BUNDLENUMBER((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_FRAMEBUNDLE_NUMBER.value()),
   DCAM_IDPROP_FRAME_BUNDLEROWBYTES((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_FRAMEBUNDLE_ROWBYTES.value()),
   // / reserved
   DCAM_IDPROP_ACTIVE_VIEW((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_ACTIVE_VIEWINDEX.value()),
   // / reserved
   DCAM_IDPROP_ACTIVE_VIEWINDEXES((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_ACTIVE_VIEWINDEX.value()),
   // / reserved
   DCAM_IDPROP_SYNCMULTIVIEWREADOUT((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_SYNC_MULTIVIEWEXPOSURE.value()),
   // / reserved
   DCAM_IDPROP_SYNC_MINTRIGGERBLANKING((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_TIMING_MINTRIGGERBLANKING.value()),
   DCAM_IDPROP_SYNC_FRAMEINTERVAL((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_INTERNAL_FRAMEINTERVAL.value()),
   DCAM_IDPROP_LOWLIGHTSENSITIVITY((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_PHOTONIMAGINGMODE.value()),
   DCAM_IDPROP_DARKCALIB_MAXIMUMINTENSITY((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_DARKCALIB_STABLEMAXINTENSITY.value()),
   DCAM_IDPROP_SUBTRACT_SAMPLINGCOUNT((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_DARKCALIB_SAMPLES.value()),
   DCAM_IDPROP_SHADINGCALIB_MINIMUMINTENSITY((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_SHADINGCALIB_STABLEMININTENSITY.value()),
   DCAM_IDPROP_SHADINGCALIB_STABLEFRAMECOUNT((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_SHADINGCALIB_STABLESAMPLES.value()),
   DCAM_IDPROP_SHADINGCALIB_INTENSITYMAXIMUMERRORPERCENTAGE((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_SHADINGCALIB_STABLEMAXERRORPERCENT.value()),
   DCAM_IDPROP_SHADINGCALIB_AVERAGEFRAMECOUNT((int) DcamapiLibrary.DCAMIDPROP.DCAM_IDPROP_SHADINGCALIB_SAMPLES.value()),
   _end_of_dcam_idprop(0);
    DCAMIDPROP(final long value)
    {
      this.value = value;
    }

    public final long value;

    @Override
    public long value()
    {
      return this.value;
    }

    @Override
    public Iterator<DCAMIDPROP> iterator()
    {
      return Collections.singleton(this).iterator();
    }

    public static IntValuedEnum<DCAMIDPROP> fromValue(final int value)
    {
      return FlagSet.fromValue(value, values());
    }
  };

  /**
   * define<br>
   * Conversion Error : null<br>
   * SKIPPED:<br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h</i><br>
   * = 0
   */
  // / <i>native declaration : lib\dcam\inc\dcamapi.h</i>
  public static final int DCAMAPI_VER = 4000;
  // / <i>native declaration : lib\dcam\inc\dcamapi.h</i>
  public static final int DCAMAPI_INITOPTION_QUICKLOCK = 16711809;

  /**
   * Initialize, uninitialize and misc.<br>
   * Original signature : <code>DCAMERR dcamapi_init(DCAMAPI_INIT*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:583</i>
   */
  @Name("dcamapi_init")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamapiInit(Pointer<DCAMAPI_INIT> param);

  /**
   * Original signature : <code>DCAMERR dcamapi_uninit()</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:584</i>
   */
  @Name("dcamapi_uninit")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamapiUninit();

  /**
   * Original signature : <code>DCAMERR dcamdev_open(DCAMDEV_OPEN*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:585</i>
   */
  @Name("dcamdev_open")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamdevOpen(Pointer<DCAMDEV_OPEN> param);

  /**
   * Original signature : <code>DCAMERR dcamdev_close(HDCAM)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:586</i>
   */
  @Name("dcamdev_close")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamdevClose(Pointer<HDCAM_struct> h);

  /**
   * ( HDCAM h, HWND hWnd, _DWORD reserved DCAM_DEFAULT_ARG );<br>
   * Original signature :
   * <code>DCAMERR dcamdev_showpanel(HDCAM, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:587</i>
   */
  @Name("dcamdev_showpanel")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamdevShowpanel(Pointer<HDCAM_struct> h,
                                                                              @CLong long iKind);

  /**
   * Original signature :
   * <code>DCAMERR dcamdev_getcapability(HDCAM, DCAMDEV_CAPABILITY*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:588</i>
   */
  @Name("dcamdev_getcapability")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamdevGetcapability(Pointer<HDCAM_struct> h,
                                                                                  Pointer<DCAMDEV_CAPABILITY> param);

  /**
   * Original signature :
   * <code>DCAMERR dcamdev_getstring(HDCAM, DCAMDEV_STRING*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:589</i>
   */
  @Name("dcamdev_getstring")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamdevGetstring(Pointer<HDCAM_struct> h,
                                                                              Pointer<DCAMDEV_STRING> param);

  /**
   * Buffer control<br>
   * call dcambuf_release() to free.<br>
   * Original signature : <code>DCAMERR dcambuf_alloc(HDCAM, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:592</i>
   */
  @Name("dcambuf_alloc")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcambufAlloc(Pointer<HDCAM_struct> h,
                                                                          @CLong long framecount);

  /**
   * Original signature :
   * <code>DCAMERR dcambuf_attach(HDCAM, const DCAMBUF_ATTACH*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:593</i>
   */
  @Name("dcambuf_attach")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcambufAttach(Pointer<HDCAM_struct> h,
                                                                           Pointer<DCAMBUF_ATTACH> param);

  /**
   * Original signature : <code>DCAMERR dcambuf_release(HDCAM, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:594</i>
   */
  @Name("dcambuf_release")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcambufRelease(Pointer<HDCAM_struct> h,
                                                                            @CLong long iKind);

  /**
   * Original signature :
   * <code>DCAMERR dcambuf_lockframe(HDCAM, DCAM_FRAME*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:595</i>
   */
  @Name("dcambuf_lockframe")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcambufLockframe(Pointer<HDCAM_struct> h,
                                                                              Pointer<DCAM_FRAME> pFrame);

  /**
   * Original signature :
   * <code>DCAMERR dcambuf_copyframe(HDCAM, DCAM_FRAME*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:596</i>
   */
  @Name("dcambuf_copyframe")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcambufCopyframe(Pointer<HDCAM_struct> h,
                                                                              Pointer<DCAM_FRAME> pFrame);

  /**
   * Original signature :
   * <code>DCAMERR dcambuf_copymetadata(HDCAM, DCAM_METADATAHDR*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:597</i>
   */
  @Name("dcambuf_copymetadata")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcambufCopymetadata(Pointer<HDCAM_struct> h,
                                                                                 Pointer<DCAM_METADATAHDR> hdr);

  /**
   * Capturing<br>
   * Original signature : <code>DCAMERR dcamcap_start(HDCAM, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:600</i>
   */
  @Name("dcamcap_start")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamcapStart(Pointer<HDCAM_struct> h,
                                                                          @CLong long mode);

  /**
   * Original signature : <code>DCAMERR dcamcap_stop(HDCAM)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:601</i>
   */
  @Name("dcamcap_stop")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamcapStop(Pointer<HDCAM_struct> h);

  /**
   * Loic: was long*<br>
   * Original signature :
   * <code>DCAMERR dcamcap_status(HDCAM, DCAMCAP_STATUS*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:602</i>
   */
  @Name("dcamcap_status")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamcapStatus(Pointer<HDCAM_struct> h,
                                                                           Pointer<IntValuedEnum<DcamapiLibrary.DCAMCAP_STATUS>> pStatus);

  /**
   * Original signature :
   * <code>DCAMERR dcamcap_transferinfo(HDCAM, DCAMCAP_TRANSFERINFO*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:603</i>
   */
  @Name("dcamcap_transferinfo")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamcapTransferinfo(Pointer<HDCAM_struct> h,
                                                                                 Pointer<DCAMCAP_TRANSFERINFO> param);

  /**
   * Original signature :
   * <code>DCAMERR dcamcap_firetrigger(HDCAM, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:604</i>
   */
  @Name("dcamcap_firetrigger")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamcapFiretrigger(Pointer<HDCAM_struct> h,
                                                                                @CLong long iKind);

  /**
   * Original signature :
   * <code>DCAMERR dcamcap_record(HDCAM, HDCAMREC)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:605</i>
   */
  @Name("dcamcap_record")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamcapRecord(Pointer<HDCAM_struct> h,
                                                                           Pointer<HDCAMREC_struct> hrec);

  /**
   * Wait abort handle control<br>
   * Original signature : <code>DCAMERR dcamwait_open(DCAMWAIT_OPEN*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:608</i>
   */
  @Name("dcamwait_open")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamwaitOpen(Pointer<DCAMWAIT_OPEN> param);

  /**
   * Original signature : <code>DCAMERR dcamwait_close(HDCAMWAIT)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:609</i>
   */
  @Name("dcamwait_close")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamwaitClose(Pointer<HDCAMWAIT_struct> hWait);

  /**
   * Original signature :
   * <code>DCAMERR dcamwait_start(HDCAMWAIT, DCAMWAIT_START*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:610</i>
   */
  @Name("dcamwait_start")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamwaitStart(Pointer<HDCAMWAIT_struct> hWait,
                                                                           Pointer<DCAMWAIT_START> param);

  /**
   * Original signature : <code>DCAMERR dcamwait_abort(HDCAMWAIT)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:611</i>
   */
  @Name("dcamwait_abort")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamwaitAbort(Pointer<HDCAMWAIT_struct> hWait);

  /**
   * Original signature : <code>DCAMERR dcamrec_openA(DCAMREC_OPENA*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:615</i>
   */
  @Name("dcamrec_openA")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecOpenA(Pointer<DCAMREC_OPENA> param);

  /**
   * Original signature : <code>DCAMERR dcamrec_openW(DCAMREC_OPENW*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:616</i>
   */
  @Name("dcamrec_openW")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecOpenW(Pointer<DCAMREC_OPENW> param);

  /**
   * Original signature : <code>DCAMERR dcamrec_close(HDCAMREC)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:630</i>
   */
  @Name("dcamrec_close")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecClose(Pointer<HDCAMREC_struct> hrec);

  /**
   * Original signature :
   * <code>DCAMERR dcamrec_lockframe(HDCAMREC, DCAM_FRAME*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:631</i>
   */
  @Name("dcamrec_lockframe")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecLockframe(Pointer<HDCAMREC_struct> hrec,
                                                                              Pointer<DCAM_FRAME> pFrame);

  /**
   * Original signature :
   * <code>DCAMERR dcamrec_copyframe(HDCAMREC, DCAM_FRAME*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:632</i>
   */
  @Name("dcamrec_copyframe")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecCopyframe(Pointer<HDCAMREC_struct> hrec,
                                                                              Pointer<DCAM_FRAME> pFrame);

  /**
   * Original signature :
   * <code>DCAMERR dcamrec_writemetadata(HDCAMREC, const DCAM_METADATAHDR*)</code>
   * <br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:633</i>
   */
  @Name("dcamrec_writemetadata")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecWritemetadata(Pointer<HDCAMREC_struct> hrec,
                                                                                  Pointer<DCAM_METADATAHDR> hdr);

  /**
   * Original signature :
   * <code>DCAMERR dcamrec_lockmetadata(HDCAMREC, DCAM_METADATAHDR*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:634</i>
   */
  @Name("dcamrec_lockmetadata")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecLockmetadata(Pointer<HDCAMREC_struct> hrec,
                                                                                 Pointer<DCAM_METADATAHDR> hdr);

  /**
   * Original signature :
   * <code>DCAMERR dcamrec_copymetadata(HDCAMREC, DCAM_METADATAHDR*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:635</i>
   */
  @Name("dcamrec_copymetadata")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecCopymetadata(Pointer<HDCAMREC_struct> hrec,
                                                                                 Pointer<DCAM_METADATAHDR> hdr);

  /**
   * Original signature :
   * <code>DCAMERR dcamrec_lockmetadatablock(HDCAMREC, DCAM_METADATABLOCKHDR*)</code>
   * <br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:636</i>
   */
  @Name("dcamrec_lockmetadatablock")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecLockmetadatablock(Pointer<HDCAMREC_struct> hrec,
                                                                                      Pointer<DCAM_METADATABLOCKHDR> hdr);

  /**
   * Original signature :
   * <code>DCAMERR dcamrec_copymetadatablock(HDCAMREC, DCAM_METADATABLOCKHDR*)</code>
   * <br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:637</i>
   */
  @Name("dcamrec_copymetadatablock")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecCopymetadatablock(Pointer<HDCAMREC_struct> hrec,
                                                                                      Pointer<DCAM_METADATABLOCKHDR> hdr);

  /**
   * Original signature : <code>DCAMERR dcamrec_pause(HDCAMREC)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:639</i>
   */
  @Name("dcamrec_pause")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecPause(Pointer<HDCAMREC_struct> hrec);

  /**
   * Original signature : <code>DCAMERR dcamrec_resume(HDCAMREC)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:640</i>
   */
  @Name("dcamrec_resume")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecResume(Pointer<HDCAMREC_struct> hrec);

  /**
   * Original signature :
   * <code>DCAMERR dcamrec_status(HDCAMREC, DCAMREC_STATUS*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamapi.h:641</i>
   */
  @Name("dcamrec_status")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcamrecStatus(Pointer<HDCAMREC_struct> hrec,
                                                                           Pointer<DCAMREC_STATUS> pStatus);

  /**
   * DCAM-API 4.0<br>
   * Original signature :
   * <code>DCAMERR dcamprop_getattr(HDCAM, DCAM_PROPERTYATTR*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:81</i>
   */
  @Name("dcamprop_getattr")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcampropGetattr(Pointer<HDCAM_struct> h,
                                                                             Pointer<DCAM_PROPERTYATTR> param);

  /**
   * Original signature :
   * <code>DCAMERR dcamprop_getvalue(HDCAM, long, double*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:82</i>
   */
  @Name("dcamprop_getvalue")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcampropGetvalue(Pointer<HDCAM_struct> h,
                                                                              @CLong long iProp,
                                                                              Pointer<Double> pValue);

  /**
   * Original signature :
   * <code>DCAMERR dcamprop_setvalue(HDCAM, long, double)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:83</i>
   */
  @Name("dcamprop_setvalue")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcampropSetvalue(Pointer<HDCAM_struct> h,
                                                                              @CLong long iProp,
                                                                              double fValue);

  /**
   * Original signature :
   * <code>DCAMERR dcamprop_setgetvalue(HDCAM, long, double*, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:84</i>
   */
  @Name("dcamprop_setgetvalue")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcampropSetgetvalue(Pointer<HDCAM_struct> h,
                                                                                 @CLong long iProp,
                                                                                 Pointer<Double> pValue,
                                                                                 @CLong long option);

  /**
   * Original signature :
   * <code>DCAMERR dcamprop_queryvalue(HDCAM, long, double*, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:85</i>
   */
  @Name("dcamprop_queryvalue")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcampropQueryvalue(Pointer<HDCAM_struct> h,
                                                                                @CLong long iProp,
                                                                                Pointer<Double> pValue,
                                                                                @CLong long option);

  /**
   * Original signature :
   * <code>DCAMERR dcamprop_getnextid(HDCAM, DCAMIDPROP*, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:86</i>
   */
  @Name("dcamprop_getnextid")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcampropGetnextid(Pointer<HDCAM_struct> h,
                                                                               Pointer<IntValuedEnum<DcamapiLibrary.DCAMIDPROP>> pProp,
                                                                               @CLong long option);

  /**
   * Original signature :
   * <code>DCAMERR dcamprop_getname(HDCAM, long, char*, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:87</i>
   */
  @Name("dcamprop_getname")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcampropGetname(Pointer<HDCAM_struct> h,
                                                                             @CLong long iProp,
                                                                             Pointer<Byte> text,
                                                                             @CLong long textbytes);

  /**
   * Original signature :
   * <code>DCAMERR dcamprop_getvaluetext(HDCAM, DCAM_PROPERTYVALUETEXT*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:88</i>
   */
  @Name("dcamprop_getvaluetext")
  public static native IntValuedEnum<DcamapiLibrary.DCAMERR> dcampropGetvaluetext(Pointer<HDCAM_struct> h,
                                                                                  Pointer<DCAM_PROPERTYVALUETEXT> param);

  /**
   * DCAM-API 3.0<br>
   * Original signature :
   * <code>BOOL dcam_getpropertyattr(HDCAM, DCAM_PROPERTYATTR*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:95</i>
   */
  @Name("dcam_getpropertyattr")
  public static native int dcamGetpropertyattr(Pointer<HDCAM_struct> h,
                                               Pointer<DCAM_PROPERTYATTR> param);

  /**
   * Original signature :
   * <code>BOOL dcam_getpropertyvalue(HDCAM, long, double*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:96</i>
   */
  @Name("dcam_getpropertyvalue")
  public static native int dcamGetpropertyvalue(Pointer<HDCAM_struct> h,
                                                @CLong long iProp,
                                                Pointer<Double> pValue);

  /**
   * Original signature :
   * <code>BOOL dcam_setpropertyvalue(HDCAM, long, double)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:97</i>
   */
  @Name("dcam_setpropertyvalue")
  public static native int dcamSetpropertyvalue(Pointer<HDCAM_struct> h,
                                                @CLong long iProp,
                                                double fValue);

  /**
   * Original signature :
   * <code>BOOL dcam_setgetpropertyvalue(HDCAM, long, double*, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:99</i>
   */
  @Name("dcam_setgetpropertyvalue")
  public static native int dcamSetgetpropertyvalue(Pointer<HDCAM_struct> h,
                                                   @CLong long iProp,
                                                   Pointer<Double> pValue,
                                                   @CLong long option);

  /**
   * Original signature :
   * <code>BOOL dcam_querypropertyvalue(HDCAM, long, double*, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:100</i>
   */
  @Name("dcam_querypropertyvalue")
  public static native int dcamQuerypropertyvalue(Pointer<HDCAM_struct> h,
                                                  @CLong long iProp,
                                                  Pointer<Double> pValue,
                                                  @CLong long option);

  /**
   * Original signature :
   * <code>BOOL dcam_getnextpropertyid(HDCAM, long*, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:102</i>
   */
  @Name("dcam_getnextpropertyid")
  public static native int dcamGetnextpropertyid(Pointer<HDCAM_struct> h,
                                                 Pointer<CLong> pProp,
                                                 @CLong long option);

  /**
   * Original signature :
   * <code>BOOL dcam_getpropertyname(HDCAM, long, char*, long)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:103</i>
   */
  @Name("dcam_getpropertyname")
  public static native int dcamGetpropertyname(Pointer<HDCAM_struct> h,
                                               @CLong long iProp,
                                               Pointer<Byte> text,
                                               @CLong long textbytes);

  /**
   * Original signature :
   * <code>BOOL dcam_getpropertyvaluetext(HDCAM, DCAM_PROPERTYVALUETEXT*)</code><br>
   * <i>native declaration : lib\dcam\inc\dcamprop.h:104</i>
   */
  @Name("dcam_getpropertyvaluetext")
  public static native int dcamGetpropertyvaluetext(Pointer<HDCAM_struct> h,
                                                    Pointer<DCAM_PROPERTYVALUETEXT> param);
}
