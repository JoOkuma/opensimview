package mirao52e.bindings;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

/**
 * <i>native declaration : lib\mirao52e\mirao52e.h</i><br>
 * This file was autogenerated by
 * <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit
 * <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or
 * <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("mirao52e")
public class MroInfo extends StructObject
{
  static
  {
    BridJ.register();
  }

  /** < Mirror temperature in degrees Celsius. */
  @Field(7)
  public double mirrorTemperature()
  {
    return this.io.getDoubleField(this, 7);
  }

  /** < Mirror temperature in degrees Celsius. */
  @Field(7)
  public MroInfo mirrorTemperature(double mirrorTemperature)
  {
    this.io.setDoubleField(this, 7, mirrorTemperature);
    return this;
  }

  /** < Power supply temperature in degrees Celsius. */
  @Field(8)
  public double powerSupplyTemperature()
  {
    return this.io.getDoubleField(this, 8);
  }

  /** < Power supply temperature in degrees Celsius. */
  @Field(8)
  public MroInfo powerSupplyTemperature(double powerSupplyTemperature)
  {
    this.io.setDoubleField(this, 8, powerSupplyTemperature);
    return this;
  }

  /** < Current in the positive power supply in Amperes. */
  @Field(9)
  public double positiveCoilsIntensity()
  {
    return this.io.getDoubleField(this, 9);
  }

  /** < Current in the positive power supply in Amperes. */
  @Field(9)
  public MroInfo positiveCoilsIntensity(double positiveCoilsIntensity)
  {
    this.io.setDoubleField(this, 9, positiveCoilsIntensity);
    return this;
  }

  /** < Current in the negrative power supply in Amperes. */
  @Field(10)
  public double negativeCoilsIntensity()
  {
    return this.io.getDoubleField(this, 10);
  }

  /** < Current in the negrative power supply in Amperes. */
  @Field(10)
  public MroInfo negativeCoilsIntensity(double negativeCoilsIntensity)
  {
    this.io.setDoubleField(this, 10, negativeCoilsIntensity);
    return this;
  }

  /**
   * < MRO_TRUE if the mirao 52-e is locked, else MRO_FALSE.<br>
   * C type : MroBoolean
   */
  @Field(11)
  public byte isMiraoLocked()
  {
    return this.io.getByteField(this, 11);
  }

  /**
   * < MRO_TRUE if the mirao 52-e is locked, else MRO_FALSE.<br>
   * C type : MroBoolean
   */
  @Field(11)
  public MroInfo isMiraoLocked(byte isMiraoLocked)
  {
    this.io.setByteField(this, 11, isMiraoLocked);
    return this;
  }

  /**
   * < MRO_TRUE if the mirao 52-e is connected, MRO_FALSE if a connection
   * problem is detecetd.<br>
   * C type : MroBoolean
   */
  @Field(12)
  public byte isMiraoConnected()
  {
    return this.io.getByteField(this, 12);
  }

  /**
   * < MRO_TRUE if the mirao 52-e is connected, MRO_FALSE if a connection
   * problem is detecetd.<br>
   * C type : MroBoolean
   */
  @Field(12)
  public MroInfo isMiraoConnected(byte isMiraoConnected)
  {
    this.io.setByteField(this, 12, isMiraoConnected);
    return this;
  }

  /**
   * < MRO_TRUE if the monitoring is enabled, else MRO_FALSE.<br>
   * C type : MroBoolean
   */
  @Field(13)
  public byte isMonitoringEnabled()
  {
    return this.io.getByteField(this, 13);
  }

  /**
   * < MRO_TRUE if the monitoring is enabled, else MRO_FALSE.<br>
   * C type : MroBoolean
   */
  @Field(13)
  public MroInfo isMonitoringEnabled(byte isMonitoringEnabled)
  {
    this.io.setByteField(this, 13, isMonitoringEnabled);
    return this;
  }

  /** < Event identifier (see "Event identification" above). */
  @Field(14)
  public int eventType()
  {
    return this.io.getIntField(this, 14);
  }

  /** < Event identifier (see "Event identification" above). */
  @Field(14)
  public MroInfo eventType(int eventType)
  {
    this.io.setIntField(this, 14, eventType);
    return this;
  }

  public MroInfo()
  {
    super();
  }

  public MroInfo(Pointer pointer)
  {
    super(pointer);
  }
}
