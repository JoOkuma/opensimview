plugins {
    id "com.jfrog.bintray" version "1.8.3"
    id "com.diffplug.gradle.spotless" version "3.1.0"
    id "de.undercouch.download" version "3.4.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'


project.ext.masterfile = (new File(projectDir,'/gradle/master.gradle')).getAbsolutePath()

// Attempts to download master gradle file
if(!hasProperty('do_not_update_master_file'))
try {
    download {
        src 'https://github.com/ClearControl/master/blob/master/master.gradle?raw=true'
        dest project.ext.masterfile
        overwrite true
        onlyIfModified true
        tempAndMove true
    }
}
catch (Throwable e)
{
}

apply from: project.ext.masterfile

//***********************************************************************************
// JAVA CODE BUILDING

sourceSets 
{
  main 
  {
    java 
    {
      srcDir 'src'
    }
    resources 
    { 
      srcDir 'src'
    }
  }
  test
  {
    java 
    {
      srcDir 'src'
    }
    resources 
    { 
      srcDir 'src'
    }
  }
}


sourceCompatibility = 1.8
targetCompatibility = 1.8


test
{
    testLogging.showStandardStreams = true
    testLogging
            { events "passed", "skipped", "failed" }

    exclude '**/demo/**'
    exclude '**/run/**'

    maxHeapSize = "4G"
}

dependencies 
{
    compile 'org.apache.commons:commons-collections4:4.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-math3:3.4.1'
    compile 'org.apache.logging.log4j:log4j-api:2.1'
    compile 'org.apache.logging.log4j:log4j-core:2.1'
    compile 'com.nativelibs4java:bridj:0.7.0'

    compile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

repositories 
{
    // Main repos:
    mavenLocal()
    mavenCentral()
    jcenter()

    maven { url "http://oss.sonatype.org/content/groups/public" }
}


task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }


//***********************************************************************************
// PUBLISHING

group   = project.ext.groupname
version = project.ext.versionsMap[project.name]

artifacts
{
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
        }
    }
}
