plugins {
	id "com.jfrog.bintray" version "1.2"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceSets 
{
  main 
  {
    java 
    {
      srcDir 'src'
    }
    resources 
    { 
      srcDir 'src'
    }
  }
  test
  {
    java 
    {
      srcDir 'src'
    }
    resources 
    { 
      srcDir 'src'
    }
  }
}


sourceCompatibility = 1.8


test 
{
    testLogging.showStandardStreams = true 
    testLogging 
    {
        events "passed", "skipped", "failed"
    }

    exclude '**/demo/**'
    exclude '**/run/**'

    maxHeapSize = "4G"
}

dependencies 
{
    compile 'org.apache.commons:commons-collections4:4.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-math3:3.4.1'
    compile 'org.apache.logging.log4j:log4j-api:2.1'
    compile 'org.apache.logging.log4j:log4j-core:2.1'
    compile 'com.nativelibs4java:bridj:0.7.0'

    compile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

repositories 
{
    mavenCentral()
    maven 
    {
        url "http://oss.sonatype.org/content/groups/public"
    } 
}


task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }



//***********************************************************************************
// PUBLISHING


/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
    ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

group = 'net.clearcontrol'
version = "1.0.2-RH"

artifacts
{
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
		}
	}
}


apply from: 'gradle/bintrayUpload.gradle'









