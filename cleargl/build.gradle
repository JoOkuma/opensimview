buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
    id "com.jfrog.bintray" version "1.2"
    id "us.kirchmeier.capsule" version "1.0.2"
    id "com.diffplug.gradle.spotless" version "3.1.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.diffplug.gradle.spotless'


//***********************************************************************************
// JAVA CODE BUILDING

sourceSets
{
	main
	{
		java
		{ srcDirs = ['src/main/java'] }
		resources
		{ srcDirs = ['src/main/resources'] }
	}
	test
	{
		java
		{ srcDirs = ['src/test/java'] }
		resources
		{ srcDirs = ['src/test/resources'] }
	}
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

test
{
	testLogging.showStandardStreams = true
	testLogging
	{ events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"
}

dependencies
{
	compile ('org.jogamp.gluegen:gluegen-rt:2.3.2'){transitive = true}
	compile ('org.jogamp.gluegen:gluegen-rt:2.3.2:natives-macosx-universal'){transitive = true}
	compile ('org.jogamp.gluegen:gluegen-rt:2.3.2:natives-windows-amd64'){transitive = true}
	compile ('org.jogamp.gluegen:gluegen-rt:2.3.2:natives-linux-amd64'){transitive = true}


	compile ('org.jogamp.jogl:jogl-all:2.3.2'){transitive = false}
	compile ('org.jogamp.jogl:jogl-all:2.3.2:natives-macosx-universal'){transitive = true}
	compile ('org.jogamp.jogl:jogl-all:2.3.2:natives-windows-amd64'){transitive = true}
	compile ('org.jogamp.jogl:jogl-all:2.3.2:natives-linux-amd64'){transitive = true}

	compile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

repositories
{
	mavenCentral()
	maven
	{ url "http://oss.sonatype.org/content/groups/public" }
}



task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

//***********************************************************************************
// TEST PROG

task TestProgFatJar(type:Jar) {
	archiveName = "TestProg.jar"
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar

	manifest {
		attributes("Class-Path": ".", 'Main-Class': 'cleargl.testprog.JOGLTestProgram')
	}
}




//***********************************************************************************
// BINTRAY PUBLISHING

def getMavenPOMVersion = {
    File mavenPOM = new File("${project.projectDir}/pom.xml")
    def xmlSlurper = new XmlSlurper()
    def output = xmlSlurper.parse(mavenPOM)
    return output."version"
}
/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
		def stdout = new ByteArrayOutputStream()
		exec {
				commandLine 'git', 'describe', '--tags'
				standardOutput = stdout
		}
		return stdout.toString().trim()
}

group = 'net.clearcontrol'
archivesBaseName = 'cleargl'
//version = '2.0.1-SNAPSHOT'

if(project.hasProperty('releasebuild')) {
    version = getMavenPOMVersion()
} else {
    version = getMavenPOMVersion()
}

println("Building ClearGL ${version}")

artifacts
{
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
		}
	}
}

apply from: 'gradle/bintrayUpload.gradle'

//***********************************************************************************
// GIT HOOKS:

apply from: 'gradle/install-git-hooks.gradle'


//***********************************************************************************
// SPOTLESS:

spotless {
    java {
        //licenseHeader '/* Licensed under Apache-2.0 */' // License header
 
        importOrder(['java', 'javax', 'com', 'org'])

        removeUnusedImports() // removes any unused imports

        eclipseFormatFile 'cleargl-eclipse-formatter.xml'  
    }
}

//***********************************************************************************
// UPLOAD TO FIJI REPO:

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://maven.imagej.net/content/repositories/releases") {
                authentication(userName: "$System.env.CI_DEPLOY_USERNAME", password: "$System.env.CI_DEPLOY_PASSWORD")
            }
            snapshotRepository(url: "http://maven.imagej.net/content/repositories/snapshots") {
                authentication(userName: "$System.env.CI_DEPLOY_USERNAME", password: "$System.env.CI_DEPLOY_PASSWORD")
            }
        }
    }
}

