package turbojpeg;

import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

/**
 * <i>native declaration : libjpeg-turbo\win64\include\turbojpeg.h</i><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a
 * href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("turbojpeg")
public class tjtransform extends StructObject
{
	public tjtransform()
	{
		super();
	}

	/**
	 * Cropping region<br>
	 * C type : tjregion
	 */
	@Field(0)
	public tjregion r()
	{
		return this.io.getNativeObjectField(this, 0);
	}

	/**
	 * Cropping region<br>
	 * C type : tjregion
	 */
	@Field(0)
	public tjtransform r(final tjregion r)
	{
		this.io.setNativeObjectField(this, 0, r);
		return this;
	}

	// / One of the @ref TJXOP "transform operations"
	@Field(1)
	public int op()
	{
		return this.io.getIntField(this, 1);
	}

	// / One of the @ref TJXOP "transform operations"
	@Field(1)
	public tjtransform op(final int op)
	{
		this.io.setIntField(this, 1, op);
		return this;
	}

	// / The bitwise OR of one of more of the @ref TJXOPT_CROP "transform options"
	@Field(2)
	public int options()
	{
		return this.io.getIntField(this, 2);
	}

	// / The bitwise OR of one of more of the @ref TJXOPT_CROP "transform options"
	@Field(2)
	public tjtransform options(final int options)
	{
		this.io.setIntField(this, 2, options);
		return this;
	}

	/**
	 * Arbitrary data that can be accessed within the body of the callback<br>
	 * function<br>
	 * C type : void*
	 */
	@Field(3)
	public Pointer<?> data()
	{
		return this.io.getPointerField(this, 3);
	}

	/**
	 * Arbitrary data that can be accessed within the body of the callback<br>
	 * function<br>
	 * C type : void*
	 */
	@Field(3)
	public tjtransform data(final Pointer<?> data)
	{
		this.io.setPointerField(this, 3, data);
		return this;
	}

	/**
	 * A callback function that can be used to modify the DCT coefficients<br>
	 * after they are losslessly transformed but before they are transcoded to a<br>
	 * new JPEG file. This allows for custom filters or other transformations to<br>
	 * be applied in the frequency domain.<br>
	 * * @param coeffs pointer to an array of transformed DCT coefficients. (NOTE:<br>
	 * this pointer is not guaranteed to be valid once the callback<br>
	 * returns, so applications wishing to hand off the DCT coefficients<br>
	 * to another function or library should make a copy of them within<br>
	 * the body of the callback.)<br>
	 * 
	 * @param arrayRegion
	 *          #tjregion structure containing the width and height of<br>
	 *          the array pointed to by <tt>coeffs</tt> as well as its offset<br>
	 *          relative to the component plane. TurboJPEG implementations may<br>
	 *          choose to split each component plane into multiple DCT coefficient<br>
	 *          arrays and call the callback function once for each array.<br>
	 * @param planeRegion
	 *          #tjregion structure containing the width and height of<br>
	 *          the component plane to which <tt>coeffs</tt> belongs<br>
	 * @param componentID
	 *          ID number of the component plane to which<br>
	 *          <tt>coeffs</tt> belongs (Y, Cb, and Cr have, respectively, ID's of<br>
	 *          0, 1, and 2 in typical JPEG images.)<br>
	 * @param transformID
	 *          ID number of the transformed image to which<br>
	 *          <tt>coeffs</tt> belongs. This is the same as the index of the<br>
	 *          transform in the transforms array that was passed to<br>
	 *          #tjTransform().<br>
	 * @param transform
	 *          a pointer to a #tjtransform structure that specifies the<br>
	 *          parameters and/or cropping region for this transform<br>
	 *          * @return 0 if the callback was successful, or -1 if an error
	 *          occurred.<br>
	 *          C type : customFilter_callback
	 */
	@Field(4)
	public Pointer<tjtransform.customFilter_callback> customFilter()
	{
		return this.io.getPointerField(this, 4);
	}

	/**
	 * A callback function that can be used to modify the DCT coefficients<br>
	 * after they are losslessly transformed but before they are transcoded to a<br>
	 * new JPEG file. This allows for custom filters or other transformations to<br>
	 * be applied in the frequency domain.<br>
	 * * @param coeffs pointer to an array of transformed DCT coefficients. (NOTE:<br>
	 * this pointer is not guaranteed to be valid once the callback<br>
	 * returns, so applications wishing to hand off the DCT coefficients<br>
	 * to another function or library should make a copy of them within<br>
	 * the body of the callback.)<br>
	 * 
	 * @param arrayRegion
	 *          #tjregion structure containing the width and height of<br>
	 *          the array pointed to by <tt>coeffs</tt> as well as its offset<br>
	 *          relative to the component plane. TurboJPEG implementations may<br>
	 *          choose to split each component plane into multiple DCT coefficient<br>
	 *          arrays and call the callback function once for each array.<br>
	 * @param planeRegion
	 *          #tjregion structure containing the width and height of<br>
	 *          the component plane to which <tt>coeffs</tt> belongs<br>
	 * @param componentID
	 *          ID number of the component plane to which<br>
	 *          <tt>coeffs</tt> belongs (Y, Cb, and Cr have, respectively, ID's of<br>
	 *          0, 1, and 2 in typical JPEG images.)<br>
	 * @param transformID
	 *          ID number of the transformed image to which<br>
	 *          <tt>coeffs</tt> belongs. This is the same as the index of the<br>
	 *          transform in the transforms array that was passed to<br>
	 *          #tjTransform().<br>
	 * @param transform
	 *          a pointer to a #tjtransform structure that specifies the<br>
	 *          parameters and/or cropping region for this transform<br>
	 *          * @return 0 if the callback was successful, or -1 if an error
	 *          occurred.<br>
	 *          C type : customFilter_callback
	 */
	@Field(4)
	public tjtransform customFilter(final Pointer<tjtransform.customFilter_callback> customFilter)
	{
		this.io.setPointerField(this, 4, customFilter);
		return this;
	}

	// / <i>native declaration : libjpeg-turbo\win64\include\turbojpeg.h</i>
	// / <i>native declaration : libjpeg-turbo\win64\include\turbojpeg.h</i>
	public static abstract class customFilter_callback extends
																										Callback<customFilter_callback>
	{
		public abstract int apply(Pointer<Short> coeffs,
															tjregion arrayRegion,
															tjregion planeRegion,
															int componentIndex,
															int transformIndex,
															Pointer<tjtransform> transform);
	};

	public tjtransform(final Pointer pointer)
	{
		super(pointer);
	}
}
