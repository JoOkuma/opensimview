package aptj.bindings;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Convention.Style;
import org.bridj.ann.Convention;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>APT</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library(value = "APT", dependencies = {"ftd2xx.dll", "MG17Utils.dll", "MG17Comms.dll", "MG17UIThread.dll", "MG17Core.dll"}) 
@Runtime(CRuntime.class) 
public class APTLibrary {
	static {
		BridJ.register();
	}
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_BSC001 = (int)11;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_BSC101 = (int)12;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_BSC002 = (int)13;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_BDC101 = (int)14;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_SCC001 = (int)21;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_DCC001 = (int)22;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_ODC001 = (int)24;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_OST001 = (int)25;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_MST601 = (int)26;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_TST001 = (int)29;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_TDC001 = (int)31;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_LTSXXX = (int)42;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_L490MZ = (int)43;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWTYPE_BBD10X = (int)44;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int CHAN1_INDEX = (int)0;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int CHAN2_INDEX = (int)1;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HOME_FWD = (int)1;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HOME_REV = (int)2;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HOMELIMSW_FWD = (int)4;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HOMELIMSW_REV = (int)1;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int STAGE_UNITS_MM = (int)1;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int STAGE_UNITS_DEG = (int)2;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWLIMSWITCH_IGNORE = (int)1;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWLIMSWITCH_MAKES = (int)2;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWLIMSWITCH_BREAKS = (int)3;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWLIMSWITCH_MAKES_HOMEONLY = (int)4;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int HWLIMSWITCH_BREAKS_HOMEONLY = (int)5;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int MOVE_FWD = (int)1;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int MOVE_REV = (int)2;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int DC_PROFILEMODE_TRAPEZOIDAL = (int)0;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int DC_PROFILEMODE_SCURVE = (int)2;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int DC_JS_DIRSENSE_POS = (int)1;
	/** <i>native declaration : lib\APT\APTAPI.fixed.h</i> */
	public static final int DC_JS_DIRSENSE_NEG = (int)2;
	/**
	 * System Level Exports.<br>
	 * Original signature : <code>long APTInit()</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:68</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long APTInit();
	/**
	 * Original signature : <code>long APTCleanUp()</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:69</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long APTCleanUp();
	/**
	 * Original signature : <code>long GetNumHWUnitsEx(long, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:70</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long GetNumHWUnitsEx(@org.bridj.ann.CLong long lHWType, Pointer<org.bridj.CLong > plNumUnits) {
		return GetNumHWUnitsEx(lHWType, Pointer.getPeer(plNumUnits));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long GetNumHWUnitsEx(@org.bridj.ann.CLong long lHWType, @Ptr long plNumUnits);
	/**
	 * Original signature : <code>long GetHWSerialNumEx(long, long, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:71</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long GetHWSerialNumEx(@org.bridj.ann.CLong long lHWType, @org.bridj.ann.CLong long lIndex, Pointer<org.bridj.CLong > plSerialNum) {
		return GetHWSerialNumEx(lHWType, lIndex, Pointer.getPeer(plSerialNum));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long GetHWSerialNumEx(@org.bridj.ann.CLong long lHWType, @org.bridj.ann.CLong long lIndex, @Ptr long plSerialNum);
	/**
	 * Original signature : <code>long GetHWInfo(long, wchar_t*, long, wchar_t*, long, wchar_t*, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:72</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long GetHWInfo(@org.bridj.ann.CLong long lSerialNum, Pointer<Character > szModel, @org.bridj.ann.CLong long lModelLen, Pointer<Character > szSWVer, @org.bridj.ann.CLong long lSWVerLen, Pointer<Character > szHWNotes, @org.bridj.ann.CLong long lHWNotesLen) {
		return GetHWInfo(lSerialNum, Pointer.getPeer(szModel), lModelLen, Pointer.getPeer(szSWVer), lSWVerLen, Pointer.getPeer(szHWNotes), lHWNotesLen);
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long GetHWInfo(@org.bridj.ann.CLong long lSerialNum, @Ptr long szModel, @org.bridj.ann.CLong long lModelLen, @Ptr long szSWVer, @org.bridj.ann.CLong long lSWVerLen, @Ptr long szHWNotes, @org.bridj.ann.CLong long lHWNotesLen);
	/**
	 * Original signature : <code>long InitHWDevice(long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:73</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long InitHWDevice(@org.bridj.ann.CLong long lSerialNum);
	/**
	 * Original signature : <code>long EnableEventDlg(BOOL)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:74</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long EnableEventDlg(int bEnable);
	/**
	 * Low Level Motor Specific Exports.<br>
	 * Original signature : <code>long MOT_LLSetEncoderCount(long, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:77</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_LLSetEncoderCount(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lEncCount);
	/**
	 * Original signature : <code>long MOT_LLGetEncoderCount(long, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:78</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_LLGetEncoderCount(@org.bridj.ann.CLong long lSerialNum, Pointer<org.bridj.CLong > plEncCount) {
		return MOT_LLGetEncoderCount(lSerialNum, Pointer.getPeer(plEncCount));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_LLGetEncoderCount(@org.bridj.ann.CLong long lSerialNum, @Ptr long plEncCount);
	/**
	 * Motor Specific Exports.<br>
	 * Original signature : <code>long MOT_SetChannel(long, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:81</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetChannel(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lChanID);
	/**
	 * Original signature : <code>long MOT_Identify(long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:82</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_Identify(@org.bridj.ann.CLong long lSerialNum);
	/**
	 * Original signature : <code>long MOT_EnableHWChannel(long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:83</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_EnableHWChannel(@org.bridj.ann.CLong long lSerialNum);
	/**
	 * Original signature : <code>long MOT_DisableHWChannel(long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:84</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_DisableHWChannel(@org.bridj.ann.CLong long lSerialNum);
	/**
	 * Original signature : <code>long MOT_SetVelParams(long, float, float, float)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:85</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetVelParams(@org.bridj.ann.CLong long lSerialNum, float fMinVel, float fAccn, float fMaxVel);
	/**
	 * Original signature : <code>long MOT_GetVelParams(long, float*, float*, float*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:86</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetVelParams(@org.bridj.ann.CLong long lSerialNum, Pointer<Float > pfMinVel, Pointer<Float > pfAccn, Pointer<Float > pfMaxVel) {
		return MOT_GetVelParams(lSerialNum, Pointer.getPeer(pfMinVel), Pointer.getPeer(pfAccn), Pointer.getPeer(pfMaxVel));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetVelParams(@org.bridj.ann.CLong long lSerialNum, @Ptr long pfMinVel, @Ptr long pfAccn, @Ptr long pfMaxVel);
	/**
	 * Original signature : <code>long MOT_GetVelParamLimits(long, float*, float*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:87</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetVelParamLimits(@org.bridj.ann.CLong long lSerialNum, Pointer<Float > pfMaxAccn, Pointer<Float > pfMaxVel) {
		return MOT_GetVelParamLimits(lSerialNum, Pointer.getPeer(pfMaxAccn), Pointer.getPeer(pfMaxVel));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetVelParamLimits(@org.bridj.ann.CLong long lSerialNum, @Ptr long pfMaxAccn, @Ptr long pfMaxVel);
	/**
	 * Original signature : <code>long MOT_SetHomeParams(long, long, long, float, float)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:88</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetHomeParams(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lDirection, @org.bridj.ann.CLong long lLimSwitch, float fHomeVel, float fZeroOffset);
	/**
	 * Original signature : <code>long MOT_GetHomeParams(long, long*, long*, float*, float*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:89</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetHomeParams(@org.bridj.ann.CLong long lSerialNum, Pointer<org.bridj.CLong > plDirection, Pointer<org.bridj.CLong > plLimSwitch, Pointer<Float > pfHomeVel, Pointer<Float > pfZeroOffset) {
		return MOT_GetHomeParams(lSerialNum, Pointer.getPeer(plDirection), Pointer.getPeer(plLimSwitch), Pointer.getPeer(pfHomeVel), Pointer.getPeer(pfZeroOffset));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetHomeParams(@org.bridj.ann.CLong long lSerialNum, @Ptr long plDirection, @Ptr long plLimSwitch, @Ptr long pfHomeVel, @Ptr long pfZeroOffset);
	/**
	 * Original signature : <code>long MOT_GetStatusBits(long, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:90</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetStatusBits(@org.bridj.ann.CLong long lSerialNum, Pointer<org.bridj.CLong > plStatusBits) {
		return MOT_GetStatusBits(lSerialNum, Pointer.getPeer(plStatusBits));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetStatusBits(@org.bridj.ann.CLong long lSerialNum, @Ptr long plStatusBits);
	/**
	 * Original signature : <code>long MOT_SetBLashDist(long, float)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:92</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetBLashDist(@org.bridj.ann.CLong long lSerialNum, float fBLashDist);
	/**
	 * Original signature : <code>long MOT_GetBLashDist(long, float*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:93</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetBLashDist(@org.bridj.ann.CLong long lSerialNum, Pointer<Float > pfBLashDist) {
		return MOT_GetBLashDist(lSerialNum, Pointer.getPeer(pfBLashDist));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetBLashDist(@org.bridj.ann.CLong long lSerialNum, @Ptr long pfBLashDist);
	/**
	 * Original signature : <code>long MOT_SetMotorParams(long, long, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:94</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetMotorParams(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lStepsPerRev, @org.bridj.ann.CLong long lGearBoxRatio);
	/**
	 * Original signature : <code>long MOT_GetMotorParams(long, long*, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:95</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetMotorParams(@org.bridj.ann.CLong long lSerialNum, Pointer<org.bridj.CLong > plStepsPerRev, Pointer<org.bridj.CLong > plGearBoxRatio) {
		return MOT_GetMotorParams(lSerialNum, Pointer.getPeer(plStepsPerRev), Pointer.getPeer(plGearBoxRatio));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetMotorParams(@org.bridj.ann.CLong long lSerialNum, @Ptr long plStepsPerRev, @Ptr long plGearBoxRatio);
	/**
	 * Original signature : <code>long MOT_SetStageAxisInfo(long, float, float, long, float)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:96</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetStageAxisInfo(@org.bridj.ann.CLong long lSerialNum, float fMinPos, float fMaxPos, @org.bridj.ann.CLong long lUnits, float fPitch);
	/**
	 * Original signature : <code>long MOT_GetStageAxisInfo(long, float*, float*, long*, float*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:97</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetStageAxisInfo(@org.bridj.ann.CLong long lSerialNum, Pointer<Float > pfMinPos, Pointer<Float > pfMaxPos, Pointer<org.bridj.CLong > plUnits, Pointer<Float > pfPitch) {
		return MOT_GetStageAxisInfo(lSerialNum, Pointer.getPeer(pfMinPos), Pointer.getPeer(pfMaxPos), Pointer.getPeer(plUnits), Pointer.getPeer(pfPitch));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetStageAxisInfo(@org.bridj.ann.CLong long lSerialNum, @Ptr long pfMinPos, @Ptr long pfMaxPos, @Ptr long plUnits, @Ptr long pfPitch);
	/**
	 * Original signature : <code>long MOT_SetHWLimSwitches(long, long, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:98</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetHWLimSwitches(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lRevLimSwitch, @org.bridj.ann.CLong long lFwdLimSwitch);
	/**
	 * Original signature : <code>long MOT_GetHWLimSwitches(long, long*, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:99</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetHWLimSwitches(@org.bridj.ann.CLong long lSerialNum, Pointer<org.bridj.CLong > plRevLimSwitch, Pointer<org.bridj.CLong > plFwdLimSwitch) {
		return MOT_GetHWLimSwitches(lSerialNum, Pointer.getPeer(plRevLimSwitch), Pointer.getPeer(plFwdLimSwitch));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetHWLimSwitches(@org.bridj.ann.CLong long lSerialNum, @Ptr long plRevLimSwitch, @Ptr long plFwdLimSwitch);
	/**
	 * Original signature : <code>long MOT_SetPIDParams(long, long, long, long, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:100</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetPIDParams(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lProp, @org.bridj.ann.CLong long lInt, @org.bridj.ann.CLong long lDeriv, @org.bridj.ann.CLong long lIntLimit);
	/**
	 * Original signature : <code>long MOT_GetPIDParams(long, long*, long*, long*, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:101</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetPIDParams(@org.bridj.ann.CLong long lSerialNum, Pointer<org.bridj.CLong > plProp, Pointer<org.bridj.CLong > plInt, Pointer<org.bridj.CLong > plDeriv, Pointer<org.bridj.CLong > plIntLimit) {
		return MOT_GetPIDParams(lSerialNum, Pointer.getPeer(plProp), Pointer.getPeer(plInt), Pointer.getPeer(plDeriv), Pointer.getPeer(plIntLimit));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetPIDParams(@org.bridj.ann.CLong long lSerialNum, @Ptr long plProp, @Ptr long plInt, @Ptr long plDeriv, @Ptr long plIntLimit);
	/**
	 * Original signature : <code>long MOT_GetPosition(long, float*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:103</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetPosition(@org.bridj.ann.CLong long lSerialNum, Pointer<Float > pfPosition) {
		return MOT_GetPosition(lSerialNum, Pointer.getPeer(pfPosition));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetPosition(@org.bridj.ann.CLong long lSerialNum, @Ptr long pfPosition);
	/**
	 * Original signature : <code>long MOT_MoveHome(long, BOOL)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:104</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_MoveHome(@org.bridj.ann.CLong long lSerialNum, int bWait);
	/**
	 * Original signature : <code>long MOT_MoveRelativeEx(long, float, BOOL)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:105</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_MoveRelativeEx(@org.bridj.ann.CLong long lSerialNum, float fRelDist, int bWait);
	/**
	 * Original signature : <code>long MOT_MoveAbsoluteEx(long, float, BOOL)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:106</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_MoveAbsoluteEx(@org.bridj.ann.CLong long lSerialNum, float fAbsPos, int bWait);
	/**
	 * Original signature : <code>long MOT_MoveVelocity(long, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:107</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_MoveVelocity(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lDirection);
	/**
	 * Original signature : <code>long MOT_StopProfiled(long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:108</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_StopProfiled(@org.bridj.ann.CLong long lSerialNum);
	/**
	 * Brushless DC Servo Specific Exports.<br>
	 * Original signature : <code>long MOT_SetDCCurrentLoopParams(long, long, long, long, long, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:111</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetDCCurrentLoopParams(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lProp, @org.bridj.ann.CLong long lInt, @org.bridj.ann.CLong long lIntLim, @org.bridj.ann.CLong long lIntDeadBand, @org.bridj.ann.CLong long lFFwd);
	/**
	 * Original signature : <code>long MOT_GetDCCurrentLoopParams(long, long*, long*, long*, long*, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:112</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetDCCurrentLoopParams(@org.bridj.ann.CLong long lSerialNum, Pointer<org.bridj.CLong > plProp, Pointer<org.bridj.CLong > plInt, Pointer<org.bridj.CLong > plIntLim, Pointer<org.bridj.CLong > plIntDeadBand, Pointer<org.bridj.CLong > plFFwd) {
		return MOT_GetDCCurrentLoopParams(lSerialNum, Pointer.getPeer(plProp), Pointer.getPeer(plInt), Pointer.getPeer(plIntLim), Pointer.getPeer(plIntDeadBand), Pointer.getPeer(plFFwd));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetDCCurrentLoopParams(@org.bridj.ann.CLong long lSerialNum, @Ptr long plProp, @Ptr long plInt, @Ptr long plIntLim, @Ptr long plIntDeadBand, @Ptr long plFFwd);
	/**
	 * Original signature : <code>long MOT_SetDCPositionLoopParams(long, long, long, long, long, long, long, long, long, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:113</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetDCPositionLoopParams(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lProp, @org.bridj.ann.CLong long lInt, @org.bridj.ann.CLong long lIntLim, @org.bridj.ann.CLong long lDeriv, @org.bridj.ann.CLong long lDerivTime, @org.bridj.ann.CLong long lLoopGain, @org.bridj.ann.CLong long lVelFFwd, @org.bridj.ann.CLong long lAccFFwd, @org.bridj.ann.CLong long lPosErrLim);
	/**
	 * Original signature : <code>long MOT_GetDCPositionLoopParams(long, long*, long*, long*, long*, long*, long*, long*, long*, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:114</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetDCPositionLoopParams(@org.bridj.ann.CLong long lSerialNum, Pointer<org.bridj.CLong > plProp, Pointer<org.bridj.CLong > plInt, Pointer<org.bridj.CLong > plIntLim, Pointer<org.bridj.CLong > plDeriv, Pointer<org.bridj.CLong > plDerivTime, Pointer<org.bridj.CLong > plLoopGain, Pointer<org.bridj.CLong > plVelFFwd, Pointer<org.bridj.CLong > plAccFFwd, Pointer<org.bridj.CLong > plPosErrLim) {
		return MOT_GetDCPositionLoopParams(lSerialNum, Pointer.getPeer(plProp), Pointer.getPeer(plInt), Pointer.getPeer(plIntLim), Pointer.getPeer(plDeriv), Pointer.getPeer(plDerivTime), Pointer.getPeer(plLoopGain), Pointer.getPeer(plVelFFwd), Pointer.getPeer(plAccFFwd), Pointer.getPeer(plPosErrLim));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetDCPositionLoopParams(@org.bridj.ann.CLong long lSerialNum, @Ptr long plProp, @Ptr long plInt, @Ptr long plIntLim, @Ptr long plDeriv, @Ptr long plDerivTime, @Ptr long plLoopGain, @Ptr long plVelFFwd, @Ptr long plAccFFwd, @Ptr long plPosErrLim);
	/**
	 * Original signature : <code>long MOT_SetDCMotorOutputParams(long, float, float, float, float)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:115</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetDCMotorOutputParams(@org.bridj.ann.CLong long lSerialNum, float fContCurrLim, float fEnergyLim, float fMotorLim, float fMotorBias);
	/**
	 * Original signature : <code>long MOT_GetDCMotorOutputParams(long, float*, float*, float*, float*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:116</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetDCMotorOutputParams(@org.bridj.ann.CLong long lSerialNum, Pointer<Float > pfContCurrLim, Pointer<Float > pfEnergyLim, Pointer<Float > pfMotorLim, Pointer<Float > pfMotorBias) {
		return MOT_GetDCMotorOutputParams(lSerialNum, Pointer.getPeer(pfContCurrLim), Pointer.getPeer(pfEnergyLim), Pointer.getPeer(pfMotorLim), Pointer.getPeer(pfMotorBias));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetDCMotorOutputParams(@org.bridj.ann.CLong long lSerialNum, @Ptr long pfContCurrLim, @Ptr long pfEnergyLim, @Ptr long pfMotorLim, @Ptr long pfMotorBias);
	/**
	 * Original signature : <code>long MOT_SetDCTrackSettleParams(long, long, long, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:117</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetDCTrackSettleParams(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lSettleTime, @org.bridj.ann.CLong long lSettleWnd, @org.bridj.ann.CLong long lTrackWnd);
	/**
	 * Original signature : <code>long MOT_GetDCTrackSettleParams(long, long*, long*, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:118</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetDCTrackSettleParams(@org.bridj.ann.CLong long lSerialNum, Pointer<org.bridj.CLong > plSettleTime, Pointer<org.bridj.CLong > plSettleWnd, Pointer<org.bridj.CLong > plTrackWnd) {
		return MOT_GetDCTrackSettleParams(lSerialNum, Pointer.getPeer(plSettleTime), Pointer.getPeer(plSettleWnd), Pointer.getPeer(plTrackWnd));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetDCTrackSettleParams(@org.bridj.ann.CLong long lSerialNum, @Ptr long plSettleTime, @Ptr long plSettleWnd, @Ptr long plTrackWnd);
	/**
	 * Original signature : <code>long MOT_SetDCProfileModeParams(long, long, float)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:119</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetDCProfileModeParams(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lProfMode, float fJerk);
	/**
	 * Original signature : <code>long MOT_GetDCProfileModeParams(long, long*, float*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:120</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetDCProfileModeParams(@org.bridj.ann.CLong long lSerialNum, Pointer<org.bridj.CLong > plProfMode, Pointer<Float > pfJerk) {
		return MOT_GetDCProfileModeParams(lSerialNum, Pointer.getPeer(plProfMode), Pointer.getPeer(pfJerk));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetDCProfileModeParams(@org.bridj.ann.CLong long lSerialNum, @Ptr long plProfMode, @Ptr long pfJerk);
	/**
	 * Original signature : <code>long MOT_SetDCJoystickParams(long, float, float, float, float, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:121</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetDCJoystickParams(@org.bridj.ann.CLong long lSerialNum, float fMaxVelLO, float fMaxVelHI, float fAccnLO, float fAccnHI, @org.bridj.ann.CLong long lDirSense);
	/**
	 * Original signature : <code>long MOT_GetDCJoystickParams(long, float*, float*, float*, float*, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:122</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetDCJoystickParams(@org.bridj.ann.CLong long lSerialNum, Pointer<Float > pfMaxVelLO, Pointer<Float > pfMaxVelHI, Pointer<Float > pfAccnLO, Pointer<Float > pfAccnHI, Pointer<org.bridj.CLong > plDirSense) {
		return MOT_GetDCJoystickParams(lSerialNum, Pointer.getPeer(pfMaxVelLO), Pointer.getPeer(pfMaxVelHI), Pointer.getPeer(pfAccnLO), Pointer.getPeer(pfAccnHI), Pointer.getPeer(plDirSense));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetDCJoystickParams(@org.bridj.ann.CLong long lSerialNum, @Ptr long pfMaxVelLO, @Ptr long pfMaxVelHI, @Ptr long pfAccnLO, @Ptr long pfAccnHI, @Ptr long plDirSense);
	/**
	 * Original signature : <code>long MOT_SetDCSettledCurrentLoopParams(long, long, long, long, long, long)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:123</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long MOT_SetDCSettledCurrentLoopParams(@org.bridj.ann.CLong long lSerialNum, @org.bridj.ann.CLong long lSettledProp, @org.bridj.ann.CLong long lSettledInt, @org.bridj.ann.CLong long lSettledIntLim, @org.bridj.ann.CLong long lSettledIntDeadBand, @org.bridj.ann.CLong long lSettledFFwd);
	/**
	 * Original signature : <code>long MOT_GetDCSettledCurrentLoopParams(long, long*, long*, long*, long*, long*)</code><br>
	 * <i>native declaration : lib\APT\APTAPI.fixed.h:124</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long MOT_GetDCSettledCurrentLoopParams(@org.bridj.ann.CLong long lSerialNum, Pointer<org.bridj.CLong > plSettledProp, Pointer<org.bridj.CLong > plSettledInt, Pointer<org.bridj.CLong > plSettledIntLim, Pointer<org.bridj.CLong > plSettledIntDeadBand, Pointer<org.bridj.CLong > plSettledFFwd) {
		return MOT_GetDCSettledCurrentLoopParams(lSerialNum, Pointer.getPeer(plSettledProp), Pointer.getPeer(plSettledInt), Pointer.getPeer(plSettledIntLim), Pointer.getPeer(plSettledIntDeadBand), Pointer.getPeer(plSettledFFwd));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long MOT_GetDCSettledCurrentLoopParams(@org.bridj.ann.CLong long lSerialNum, @Ptr long plSettledProp, @Ptr long plSettledInt, @Ptr long plSettledIntLim, @Ptr long plSettledIntDeadBand, @Ptr long plSettledFFwd);
}
