package asdk.bindings;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>ASDK</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("ASDK") 
@Runtime(CRuntime.class) 
public class ASDKLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : lib\asdk\asdkType.h</i>
	 */
	public enum Bool implements IntValuedEnum<Bool > {
		FALSE(0),
		TRUE(1);
		Bool(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<Bool > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<Bool > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : lib\asdk\asdkType.h</i>
	 */
	public enum COMPL_STAT implements IntValuedEnum<COMPL_STAT > {
		/** < Function returns successfully */
		SUCCESS(0),
		/** < Function returns with error */
		FAILURE(-1);
		COMPL_STAT(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<COMPL_STAT > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<COMPL_STAT > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : lib\asdk\asdkType.h</i> */
	public static final int IS_64B = (int)0;
	/** <i>native declaration : lib\asdk\asdkType.h</i> */
	public static final int IS_WIN32 = (int)1;
	/**
	 * Initialise DM connection.<br>
	 * <br>
	 * @param[in]  serialName Serial names of the DM.<br>
	 * <br>
	 * @return On success, pointer to DM object is returned. Otherwise, NULL is<br>
	 * returned and asdkGetLastError() can be used to get error description.<br>
	 * Original signature : <code>asdkDM* asdkInit(CStrConst)</code><br>
	 * <i>native declaration : lib\asdk\asdkWrapper.h:38</i>
	 */
	public static Pointer<ASDKLibrary.DM > asdkInit(Pointer<Byte > serialName) {
		return (Pointer)Pointer.pointerToAddress(asdkInit(Pointer.getPeer(serialName)), ASDKLibrary.DM.class);
	}
	@Ptr 
	protected native static long asdkInit(@Ptr long serialName);
	/**
	 * Release DM.<br>
	 * <br>
	 * @param[in] pDm Pointer to DM object.<br>
	 * <br>
	 * @return On success, SUCCESS is returned. Otherwise, FAILURE is<br>
	 * returned and asdkGetLastError() can be used to get error description.<br>
	 * Original signature : <code>COMPL_STAT asdkRelease(asdkDM*)</code><br>
	 * <i>native declaration : lib\asdk\asdkWrapper.h:48</i>
	 */
	public static IntValuedEnum<ASDKLibrary.COMPL_STAT > asdkRelease(Pointer<ASDKLibrary.DM > pDm) {
		return FlagSet.fromValue(asdkRelease(Pointer.getPeer(pDm)), ASDKLibrary.COMPL_STAT.class);
	}
	protected native static int asdkRelease(@Ptr long pDm);
	/**
	 * Send arrays to electronics.<br>
	 * <br>
	 * @param[in] pDm   Pointer to DM object.<br>
	 * @param[in] value Array of nAct*nDm with values to send for each DM,<br>
	 *                   valid range = [-1:1].<br>
	 * <br>
	 * @return On success, SUCCESS is returned. Otherwise, FAILURE is<br>
	 * returned and asdkGetLastError() can be used to get error description.<br>
	 * Original signature : <code>COMPL_STAT asdkSend(asdkDM*, const Scalar*)</code><br>
	 * <i>native declaration : lib\asdk\asdkWrapper.h:61</i>
	 */
	public static IntValuedEnum<ASDKLibrary.COMPL_STAT > asdkSend(Pointer<ASDKLibrary.DM > pDm, Pointer<Double > value) {
		return FlagSet.fromValue(asdkSend(Pointer.getPeer(pDm), Pointer.getPeer(value)), ASDKLibrary.COMPL_STAT.class);
	}
	protected native static int asdkSend(@Ptr long pDm, @Ptr long value);
	/**
	 * Reset mirror values.<br>
	 * <br>
	 * @param[in] pDm   Pointer to DM object.<br>
	 * <br>
	 * @return On success, SUCCESS is returned. Otherwise, FAILURE is<br>
	 * returned and asdkGetLastError() can be used to get error description.<br>
	 * Original signature : <code>COMPL_STAT asdkReset(asdkDM*)</code><br>
	 * <i>native declaration : lib\asdk\asdkWrapper.h:71</i>
	 */
	public static IntValuedEnum<ASDKLibrary.COMPL_STAT > asdkReset(Pointer<ASDKLibrary.DM > pDm) {
		return FlagSet.fromValue(asdkReset(Pointer.getPeer(pDm)), ASDKLibrary.COMPL_STAT.class);
	}
	protected native static int asdkReset(@Ptr long pDm);
	/**
	 * Send Asynchronous Pattern.<br>
	 * <br>
	 * @param[in] pDm      Pointer to DM object.<br>
	 * @param[in] pattern  Array of nAct * nPattern elements with patterns to send.<br>
	 * @param[in] nPattern Number of patterns to send.<br>
	 * @param[in] nRepeat  Number of times the data in the buffer is to be sent. A value<br>
	 *                     of 0 means that digital output operation proceeds indefinitely.<br>
	 * <br>
	 * @warning If you use pattern generation with several DMs, but only a single DAQ card,<br>
	 *          a DM will be queued until the end of execution of the preceding DM.<br>
	 * <br>
	 * @return On success, SUCCESS is returned. Otherwise, FAILURE is<br>
	 * returned and asdkGetLastError() can be used to get error description.<br>
	 * Original signature : <code>COMPL_STAT asdkSendPattern(asdkDM*, const Scalar*, UInt, UInt)</code><br>
	 * <i>native declaration : lib\asdk\asdkWrapper.h:89</i>
	 */
	public static IntValuedEnum<ASDKLibrary.COMPL_STAT > asdkSendPattern(Pointer<ASDKLibrary.DM > pDm, Pointer<Double > pattern, int nPattern, int nRepeat) {
		return FlagSet.fromValue(asdkSendPattern(Pointer.getPeer(pDm), Pointer.getPeer(pattern), nPattern, nRepeat), ASDKLibrary.COMPL_STAT.class);
	}
	protected native static int asdkSendPattern(@Ptr long pDm, @Ptr long pattern, int nPattern, int nRepeat);
	/**
	 * Stop asynchronous transfer.<br>
	 * <br>
	 * @param[in] pDm Pointer to DM object.<br>
	 * <br>
	 * @warning This function is dependent on the interface, all DMs on the same<br>
	 *          interface can be stopped.<br>
	 * <br>
	 * @return On success, SUCCESS is returned. Otherwise, FAILURE is<br>
	 * returned and asdkGetLastError() can be used to get error description.<br>
	 * Original signature : <code>COMPL_STAT asdkStop(asdkDM*)</code><br>
	 * <i>native declaration : lib\asdk\asdkWrapper.h:102</i>
	 */
	public static IntValuedEnum<ASDKLibrary.COMPL_STAT > asdkStop(Pointer<ASDKLibrary.DM > pDm) {
		return FlagSet.fromValue(asdkStop(Pointer.getPeer(pDm)), ASDKLibrary.COMPL_STAT.class);
	}
	protected native static int asdkStop(@Ptr long pDm);
	/**
	 * Get value of one parameter <br>
	 * <br>
	 * @param[in]  pDm      Pointer to DM object.<br>
	 * @param[in]  command  Parameter name.<br>
	 * @param[out] value    Returned value.<br>
	 * <br>
	 * @return On success, SUCCESS is returned. Otherwise, FAILURE is<br>
	 * returned and asdkGetLastError() can be used to get an error description.<br>
	 * Original signature : <code>COMPL_STAT asdkGet(asdkDM*, CStrConst, Scalar*)</code><br>
	 * <i>native declaration : lib\asdk\asdkWrapper.h:116</i>
	 */
	public static IntValuedEnum<ASDKLibrary.COMPL_STAT > asdkGet(Pointer<ASDKLibrary.DM > pDm, Pointer<Byte > command, Pointer<Double > value) {
		return FlagSet.fromValue(asdkGet(Pointer.getPeer(pDm), Pointer.getPeer(command), Pointer.getPeer(value)), ASDKLibrary.COMPL_STAT.class);
	}
	protected native static int asdkGet(@Ptr long pDm, @Ptr long command, @Ptr long value);
	/**
	 * Set value of one parameter <br>
	 * <br>
	 * @param[in] pDm      Pointer to DM object.<br>
	 * @param[in] command  Parameter name.<br>
	 * @param[in] value    New value.<br>
	 * <br>
	 * @return On success, acecsSUCCESS is returned. Otherwise, FAILURE is<br>
	 * returned and asdkGetLastError() can be used to get an error description.<br>
	 * Original signature : <code>COMPL_STAT asdkSet(asdkDM*, CStrConst, Scalar)</code><br>
	 * <i>native declaration : lib\asdk\asdkWrapper.h:128</i>
	 */
	public static IntValuedEnum<ASDKLibrary.COMPL_STAT > asdkSet(Pointer<ASDKLibrary.DM > pDm, Pointer<Byte > command, double value) {
		return FlagSet.fromValue(asdkSet(Pointer.getPeer(pDm), Pointer.getPeer(command), value), ASDKLibrary.COMPL_STAT.class);
	}
	protected native static int asdkSet(@Ptr long pDm, @Ptr long command, double value);
	/**
	 * Get value of one parameter <br>
	 * <br>
	 * @param[in] pDm      Pointer to DM object.<br>
	 * @param[in] command  Parameter name.<br>
	 * @param[in] cstr     New value for the parameter.<br>
	 * <br>
	 * @return On success, SUCCESS is returned. Otherwise, FAILURE is<br>
	 * returned and asdkGetLastError() can be used to get an error description.<br>
	 * Original signature : <code>COMPL_STAT asdkSetString(asdkDM*, CStrConst, CStrConst)</code><br>
	 * <i>native declaration : lib\asdk\asdkWrapper.h:140</i>
	 */
	public static IntValuedEnum<ASDKLibrary.COMPL_STAT > asdkSetString(Pointer<ASDKLibrary.DM > pDm, Pointer<Byte > command, Pointer<Byte > cstr) {
		return FlagSet.fromValue(asdkSetString(Pointer.getPeer(pDm), Pointer.getPeer(command), Pointer.getPeer(cstr)), ASDKLibrary.COMPL_STAT.class);
	}
	protected native static int asdkSetString(@Ptr long pDm, @Ptr long command, @Ptr long cstr);
	/**
	 * @brief Displays the last error in stack.<br>
	 * <br>
	 * It display on standard output (stdout or stderr), the latest error currently<br>
	 * stored in the error stack.<br>
	 * Original signature : <code>void asdkPrintLastError()</code><br>
	 * <i>native declaration : lib\asdk\asdkWrapper.h:149</i>
	 */
	public static native void asdkPrintLastError();
	/**
	 * @brief Get the last error status.<br>
	 * <br>
	 * @param[out] errorNo Error number.<br>
	 * @param[out] errMsg  Pointer to the error message.<br>
	 * @param[in]  errSize Size of the errMsg buffer.<br>
	 * <br>
	 * @return On success, SUCCESS is returned. Otherwise, if stack is empty,<br>
	 * FAILURE is returned.<br>
	 * Original signature : <code>COMPL_STAT asdkGetLastError(UInt*, CString, Size_T)</code><br>
	 * <i>native declaration : lib\asdk\asdkWrapper.h:161</i>
	 */
	public static IntValuedEnum<ASDKLibrary.COMPL_STAT > asdkGetLastError(Pointer<Integer > errorNo, Pointer<Byte > errMsg, @Ptr long errSize) {
		return FlagSet.fromValue(asdkGetLastError(Pointer.getPeer(errorNo), Pointer.getPeer(errMsg), errSize), ASDKLibrary.COMPL_STAT.class);
	}
	protected native static int asdkGetLastError(@Ptr long errorNo, @Ptr long errMsg, @Ptr long errSize);
	/** Undefined type */
	public static interface DM {
		
	};
}
